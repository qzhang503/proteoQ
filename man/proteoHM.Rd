% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proteoQ-hm.R
\name{proteoHM}
\alias{proteoHM}
\alias{pepHM}
\alias{prnHM}
\title{Visualization of heat maps}
\usage{
proteoHM(id = gene, col_select = NULL, col_benchmark = NULL,
  scale_log2r = TRUE, impute_na = FALSE, complete_cases = FALSE,
  df = NULL, filepath = NULL, filename = NULL, annot_cols = NULL,
  annot_colnames = NULL, annot_rows = NULL, xmin = -1, xmax = 1,
  xmargin = 0.1, ...)

pepHM(...)

prnHM(...)
}
\arguments{
\item{id}{Character string to indicate the type of data. The value will be
determined automatically. Peptide data will be used at \code{id = pep_seq}
or \code{pep_seq_mod}, and protein data will be used at \code{id = prot_acc}
or \code{gene}.}

\item{col_select}{Character string to a column key in \code{expt_smry.xlsx}.
Samples corresponding to non-empty entries under the column key will be
included in the indicated analysis. At the \code{NULL} default, the column
key will be \code{Select}.}

\item{col_benchmark}{Not used.}

\item{scale_log2r}{Logical; if TRUE, adjusts \code{log2FC} to the same scale
of standard deviation across all samples. The default is TRUE.}

\item{impute_na}{Logical; if TRUE, data with the imputation of missing values
will be used. The default is FALSE.}

\item{complete_cases}{Logical; if TRUE, only cases that are complete with no
missing values will be used. The default is FALSE.}

\item{df}{The name of input data file. By default, it will be determined
automatically by the value of \code{id}.}

\item{filepath}{A file path to output results. By default, it will be
determined automatically by the name of the calling function and the value
of \code{id} in the \code{call}.}

\item{filename}{A representative file name to output image(s). By default, it
will be determined automatically by the name of the current \code{call}. The
image(s) are saved via \code{\link[ggplot2]{ggsave}} where the image type
will be determined by the extension of the file name. A \code{.png} format
will be used at default or at an unrecognized file extension.}

\item{annot_cols}{A character vector of column keys in \code{expt_smry.xlsx}.
The values under the selected keys will be used to color-code sample IDs on
the top of the indicated plot. The default is NULL without column
annotation.}

\item{annot_colnames}{A character vector of replacement name(s) to
\code{annot_cols}. The default is NULL without name replacement.}

\item{annot_rows}{A character vector of column keys that can be found from
input files of \code{Peptide.txt}, \code{Protein.txt} et al. The values
under the selected keys will be used to color-code peptides or proteins on
the side of the indicated plot. The default is NULL without row annotation.}

\item{xmin}{Numeric; the minimum x at a log2 scale. The default is -1.}

\item{xmax}{Numeric; the maximum  x at a log2 scale. The default is 1.}

\item{xmargin}{Numeric; the margin in heat scales. The default is 0.1.}

\item{...}{\code{filter_}: Variable argument statements for the row filtration
of data against the column keys in \code{Peptide.txt} or \code{Protein.txt}.
Each statement contains to a list of logical expression(s). The \code{lhs}
needs to start with \code{filter_}. The logical condition(s) at the
\code{rhs} needs to be enclosed in \code{exprs} with round parenthesis. For
example, \code{pep_len} is a column key present in \code{Mascot} peptide
tables of \code{Peptide.txt}. The statement \code{filter_peps_at =
exprs(pep_len <= 50)} will remove peptide entries with \code{pep_len > 50}.
See also \code{\link{pepHist}}. \cr \cr \code{arrange_}: Logical
expression(s) for the row ordering of data. The \code{lhs} needs to start
with \code{arrange_}. The logical condition(s) at the \code{rhs} needs to be
enclosed in \code{exprs} with round parenthesis. \cr \cr Additional
parameters for plotting: \cr \code{width}, the width of plot \cr
\code{height}, the height of plot \cr \cr Additional arguments for
\code{\link[pheatmap]{pheatmap}}, i.e., \code{cluster_rows}... \cr \cr Note
arguments disabled for \code{pheatmap}: \cr \code{annotation_col}; instead
use keys indicated in \code{annot_cols} \cr \code{annotation_row}; instead
use keys indicated in \code{annot_rows}}
}
\value{
Heat maps and optional sub trees.
}
\description{
\code{proteoHM} visualizes the heat maps of protein or peptide \code{log2FC}.
Users should avoid call the method directly, but instead use the following
wrappers.

\code{pepHM} is a wrapper function of \code{\link{proteoHM}} for peptide data

\code{prnHM} is a wrapper function of \code{\link{proteoHM}} for protein data
}
\details{
Data rows without non-missing pairs will result in NA distances in inter-row
dissimilarities (\code{\link[stats]{dist}}). At \code{complet_cases = TRUE},
the data subset that are complete without missing values will be used. At
\code{impute_na = TRUE}, all data rows will be used with NA imputation (see
\code{\link{prnImp}}). At the default of \code{complet_cases = FALSE} and
\code{impute_na = FALSE}, NA distances will be arbitrarily replaced with the
mean value of the row-disance matrix for hierarchical row clustering.

Similar to data rows, NA distances in data columns will be replaced with the
mean value of the column-distance matrix.

To avoid memory failure, row aggregation using the \code{kmeans_k} option
(\code{\link[pheatmap]{pheatmap}}) may be considered for large data sets.
}
\examples{
# ===================================
# Heat map
# ===================================

## !!!require the brief working example in `?load_expts`

# global option
scale_log2r <- TRUE

# row clustering
prnHM(
  xmin = -1,
  xmax = 1,
  xmargin = 0.1,
  annot_cols = c("Group", "Color", "Alpha", "Shape"),
  annot_colnames = c("Group", "Lab", "Batch", "WHIM"),
  cluster_rows = TRUE,
  cutree_rows = 10,
  show_rownames = FALSE,
  show_colnames = TRUE,
  fontsize_row = 3,
  cellwidth = 14,
  width = 18,
  height = 12,
  filter_sp = exprs(species == "human", prot_n_pep >= 2),
  filename = "huprns_npep2.png",
)

# rows ordered by kinase classes then by gene names
# (error if `normPSM(annot_kinases = FALSE, ...)`)
prnHM(
  xmin = -1,
  xmax = 1,
  xmargin = 0.1,
  annot_cols = c("Group", "Color", "Alpha", "Shape"),
  annot_colnames = c("Group", "Lab", "Batch", "WHIM"),
  cluster_rows = FALSE,
  annot_rows = c("kin_class"),
  show_rownames = TRUE,
  show_colnames = TRUE,
  fontsize_row = 2,
  cellheight = 2,
  cellwidth = 14,
  width = 22,
  height = 22,
  filter_kin = exprs(kin_attr, species == "human"),
  arrange_kin = exprs(kin_order, gene),
  filename = "hukins_rows_by_class.png",
)

# `cutree_rows` ignored at `cluster_rows = FALSE`
prnHM(
  scale_log2r = TRUE,
  annot_cols = c("Group"),
  cluster_rows = FALSE,
  clustering_distance_rows  = "maximum",
  cutree_rows = 6,
  show_rownames = FALSE,
  show_colnames = TRUE,
  fontsize_row = 3,
  cellwidth = 14,
  width = 22,
  height = 22,
  filename = "cutree_overruled.png",
)


## significance tests for pVal columns
# (`W2_bat.pVal ((W2.BI.TMT2-W2.BI.TMT1))` is a column key in Peptide_pVals.txt)
pepSig(
  impute_na = FALSE, 
  W2_bat = ~ Term["(W2.BI.TMT2-W2.BI.TMT1)", "(W2.JHU.TMT2-W2.JHU.TMT1)", "(W2.PNNL.TMT2-W2.PNNL.TMT1)"], # batch effects
  W2_loc = ~ Term_2["W2.BI-W2.JHU", "W2.BI-W2.PNNL", "W2.JHU-W2.PNNL"], # location effects
  W16_vs_W2 = ~ Term_3["W16-W2"], 
)

prnSig(impute_na = FALSE)

# now can have row filtration by pVals
prnHM(
  xmin = -1,
  xmax = 1,
  xmargin = 0.1,
  annot_cols = c("Group", "Color", "Alpha", "Shape"),
  annot_colnames = c("Group", "Lab", "Batch", "WHIM"),
  cluster_rows = TRUE,
  cutree_rows = 10,
  show_rownames = TRUE,
  show_colnames = TRUE,
  fontsize_row = 3,
  cellwidth = 14,
  filter_sp = exprs(species == "human", prot_n_pep >= 2),
  filter_by = exprs(`W2_bat.pVal ((W2.BI.TMT2-W2.BI.TMT1))` <= 1e-6), 
  filename = "pval_cutoff_at_1e6.png", 
)


## impute NA
# peptide
pepImp(m = 2, maxit = 2)

# protein
prnImp(m = 5, maxit = 5)

# with NA imputation
prnHM(
  impute_na = TRUE, 
  xmin = -1,
  xmax = 1,
  xmargin = 0.1,
  annot_cols = c("Group", "Color", "Alpha", "Shape"),
  annot_colnames = c("Group", "Lab", "Batch", "WHIM"),
  cluster_rows = TRUE,
  cutree_rows = 10,
  show_rownames = FALSE,
  show_colnames = TRUE,
  fontsize_row = 3,
  cellwidth = 14,
  cellheight = 4,
  width = 18,
  height = 12,
  filter_sp = exprs(species == "human", prot_n_pep >= 2),
  filename = "huprns_npep2_impna.png",
)


# peptides under selected protein(s)
pepHM(
  xmin = -2,
  xmax = 2,
  xmargin = 0.1,
  annot_cols = c("Group", "Color", "Alpha", "Shape"),
  annot_colnames = c("Group", "Lab", "Batch", "WHIM"),
  cluster_rows = TRUE,
  annot_rows = c("gene"),
  show_rownames = TRUE,
  show_colnames = TRUE,
  fontsize_row = 10,
  cellwidth = 12,
  cellheight = 12,
  width = 18,
  height = 12,
  filter_by = exprs(gene \%in\% c("NCL", "Ncl")),
  filename = "ncl_all.png",
)

# rows ordered by gene 
pepHM(
  xmin = -2,
  xmax = 2,
  xmargin = 0.1,
  annot_cols = c("Group", "Color", "Alpha", "Shape"),
  annot_colnames = c("Group", "Lab", "Batch", "WHIM"),
  cluster_rows = FALSE,
  annot_rows = c("gene"),
  show_rownames = TRUE,
  show_colnames = TRUE,
  fontsize_row = 10,
  cellwidth = 12,
  cellheight = 12,
  width = 18,
  height = 12,
  
  filter_by = exprs(gene \%in\% c("NCL", "Ncl")),
  arrange_peps_by = exprs(gene),
  filename = "ncl_rows_by_gene.png",
)

# ordered by sequence 
# (may try `exprs(pep_seq)` if `pep_seq_mod` not a column key in `Peptide.txt`)
pepHM(
  xmin = -2,
  xmax = 2,
  xmargin = 0.1,
  annot_cols = c("Group", "Color", "Alpha", "Shape"),
  annot_colnames = c("Group", "Lab", "Batch", "WHIM"),
  cluster_rows = FALSE,
  annot_rows = c("gene"),
  show_rownames = TRUE,
  show_colnames = TRUE,
  fontsize_row = 10,
  cellwidth = 12,
  cellheight = 12,
  width = 18,
  height = 12,
  filter_by = exprs(gene \%in\% c("NCL", "Ncl")),
  arrange_peps_by = exprs(pep_seq_mod),
  filename = "ncl_rows_by_seq.png",
)

# sample selection
pepHM(
  col_select = BI_1, 
  xmin = -2,
  xmax = 2,
  xmargin = 0.1,
  annot_cols = c("Group", "Color", "Alpha", "Shape"),
  annot_colnames = c("Group", "Lab", "Batch", "WHIM"),
  cluster_rows = TRUE,
  annot_rows = c("gene"),
  show_rownames = TRUE,
  show_colnames = TRUE,
  fontsize_row = 10,
  cellwidth = 12,
  cellheight = 12,
  width = 18,
  height = 12,
  filter_by = exprs(gene \%in\% c("NCL", "Ncl")),
  arrange_peps_by = exprs(gene),  
  filename = "ncl_bi1.png",
)

}
\seealso{
\code{\link{load_expts}} for a minimal working example in data
 normalization \cr \code{\link{pepHist}} and \code{\link{prnHist}} for
 extended examples in histogram visualization. \cr \code{\link{contain_str}},
 \code{\link{contain_chars_in}}, \code{\link{not_contain_str}},
 \code{\link{not_contain_chars_in}}, \code{\link{start_with_str}},
 \code{\link{end_with_str}}, \code{\link{start_with_chars_in}} and
 \code{\link{ends_with_chars_in}} for data subsetting by character strings
 \cr \code{\link{pepImp}} and \code{\link{prnImp}} for missing value
 imputation \cr \code{\link{pepSig}} and \code{\link{prnSig}} for
 significance tests \cr
}
