% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proteoQ-prntable.R
\name{standPrn}
\alias{standPrn}
\title{Standardize protein results}
\usage{
standPrn(method_align = c("MC", "MGKernel"), range_log2r = c(10, 90),
  range_int = c(5, 95), n_comp = NULL, seed = NULL,
  col_select = NULL, cache = TRUE, ...)
}
\arguments{
\item{method_align}{Character string indicating the method in aligning
\code{log2FC} across samples. \code{MC}: median-centering; \code{MGKernel}:
the kernal density defined by multiple Gaussian functions
(\code{\link[mixtools]{normalmixEM}}). At the \code{MC} default, the ratio
profiles of each sample will be aligned in that the medians of the
\code{log2FC} are zero. At \code{MGKernel}, the ratio profiles of each
sample will be aligned in that the \code{log2FC} at the maximums of kernel
desity are zero.}

\item{range_log2r}{Numeric vector at length two. The argument specifies the
range of the \code{log2FC} for use in the scaling normalization of standard
deviation across samples. The default is between the 10th and the 90th
quantiles.}

\item{range_int}{Numeric vector at length two. The argument specifies the
range of the \code{intensity} of reporter ions for use in the scaling
normalization of standard deviation across samples. The default is between
the 5th and the 95th quantiles.}

\item{n_comp}{Integer; the number of Gaussian components to be used with
\code{method_align = MGKernel}. A typical value is 2 or 3. The variable
\code{n_comp} overwrites the augument \code{k} in
\code{\link[mixtools]{normalmixEM}}.}

\item{seed}{Integer; a seed setting a starting point for reproducible
analyses.}

\item{col_select}{Character string to a column key in \code{expt_smry.xlsx}.
At the \code{NULL} default, the column key of \code{Select} in
\code{expt_smry.xlsx} will be used. In the case of no samples being
specified under \code{Select}, the column key of \code{Sample_ID} will be
used. The non-empty entries under the ascribing column will be used in
indicated analysis.}

\item{...}{\code{slice_}: Variable argument statements for the identification
of row subsets. The partial data will be taken for parameterizing the
alignment of \code{log2FC} across samples. The full data set will be updated
subsequently with the newly derived paramters. Note that there is no data
entry removals from the complete data set with the \code{slice_} procedure.
\cr \cr The variable argument statements should be in the following format:
each of the statement contains a list of logical expression(s). The
\code{lhs} needs to start with \code{slice_}. The logical condition(s) at
the \code{rhs} needs to be enclosed in \code{exprs} with round parenthesis.
For example, \code{prot_n_pep} is a column key present in
\code{Protein.txt}. The \code{slice_prns_at = exprs(prot_n_pep >= 5)} will
extract protein entries with five or more identifying peptide sequences for
\code{log2FC} alignment. Protein entries with less than five identifying
sequences will remain in \code{Protein.txt} but not used in the
parameterization. See also \code{\link{normPSM}} for the variable arguments
of \code{filter_}. \cr \cr Additional parameters from
\code{\link[mixtools]{normalmixEM}}, i.e., \cr \code{maxit}, the maximum
number of iterations allowed; \cr \code{epsilon}, tolerance limit for
declaring algorithm convergence.}
}
\value{
The primary output is in \code{...\\Protein\\Protein.txt}.
}
\description{
\code{standPrn} standardizes protein results from \code{\link{Pep2Prn}} with
additional choices in data alignment. The utility further supports iterative
normalization against data under selected sample columns, data rows or both.
}
\details{
In the primary output file, "\code{Protein.txt}", values under columns
\code{log2_R...} are logarithmic ratios at base 2 in relative to the
\code{reference(s)} within each multiplex TMT set, or to the row means if no
\code{reference(s)} are present. Values under columns \code{N_log2_R...} are
aligned \code{log2_R...} according to \code{method_align} without scaling
normalization. Values under columns \code{Z_log2_R...} are \code{N_log2_R...}
with additional scaling normalization. Values under columns \code{I...} are
\code{reporter-ion intensity} before normalization. Values under columns
\code{N_I...} are normalized \code{I...}. Values under columns
\code{sd_log2_R...} are the standard deviation of the \code{log2FC} of
proteins from ascribing peptides.
}
\examples{
# ===================================
# Protein normalization
# ===================================

## !!!require the brief working example in `?load_expts`

# ===================================
# (1) `MGKernel`
# ===================================

# !!! initial `Protein.txt` results from `Pep2Prn()` aligned by median centering (MC)
# !!! the first `MGKernel` normalization will apply to all samples
# !!! succeeding `MGKernel` normalization(s) will also apply to all samples if changing `n_comp` (see section 4)

# fresh start of `Protein.txt` (for demonstration)
unlink(file.path(dat_dir, "Protein"), recursive = TRUE, force = TRUE)
Pep2Prn(use_unique_pep = TRUE)

# data in initial `Protein.txt` from `Pep2Prn()` are aligned by MC
# (for samplicity only plot against samples indicated under `expt_smry.xlsx::BI_1`)
prnHist(scale_log2r = TRUE, col_select = BI_1, filename = mc.png)

# (1.1) the first `MGKernel` after `Pep2Prn()`
# (default double trimming by log2FC and intensity percentiles also apply)
standPrn(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 749662, 
  maxit = 200, 
  epsilon = 1e-05, 
)

# histograms for all data rows
prnHist(scale_log2r = TRUE, col_select = BI_1, filename = mG.png)

# human subset
# (a little off in relative to all data rows)
prnHist(scale_log2r = TRUE, col_select = BI_1, filter_by = exprs(species == "human"), filename = mG_human.png)

# mouse subset 
# (a lot off in relative to all data rows)
prnHist(scale_log2r = TRUE, col_select = BI_1, filter_by = exprs(species == "mouse"), filename = mG_mouse.png)

# (1.2) additive step to (1.1): against `expt_smry.xlsx::W2` samples and based on their human subset
standPrn(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 749662, 
  maxit = 200, 
  epsilon = 1e-05, 
  col_select = W2,  
  slice_peps_by = exprs(species == "human"),
)

# human subset 
# (W2 samples are now aligned)
prnHist(scale_log2r = TRUE, col_select = BI_1, filter_by = exprs(species == "human"), filename = mG_bi1_human_slicehuw2.png)

# (1.3) additive to (1.2): against `expt_smry.xlsx::W16` samples and based on their human subset
standPrn(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 749662, 
  maxit = 200, 
  epsilon = 1e-05, 
  col_select = W16,  
  slice_peps_by = exprs(species == "human"),
)

# human subset 
# (W16 samples are now also aligned)
prnHist(scale_log2r = TRUE, col_select = BI_1, filter_by = exprs(species == "human"), filename = mG_human_slicehuw16.png)

# side effects: to recaptulate the misalignment between human data and human + mouse data
# (this is because density curves are based on the latest `standPrn` at `method_align = MGKernel`)
prnHist(scale_log2r = TRUE, col_select = BI_1, filename = mG_recap.png)


# ===================================
# (2) Mixed-bed
# ===================================
# start over
unlink(file.path(dat_dir, "Protein"), recursive = TRUE, force = TRUE)
Pep2Prn(use_unique_pep = TRUE)

# data in initial `Protein.txt` from `Pep2Prn()` are aligned by MC
prnHist(scale_log2r = TRUE, col_select = BI_1, filename = mc.png)

# (2.1) the first `MGKernel` alignment against all samples using all data rows
standPrn(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 883, 
  maxit = 200, 
  epsilon = 1e-05, 
)

prnHist(scale_log2r = TRUE, col_select = BI_1, filename = mG.png)

# (2.2) followed by MC against selected samples using all data rows
# (arguments `n_comp`, `seed`, `maxit`, `epsilon` have no effects at `method_align = MC`)
standPrn(
  method_align = MC,
  
  n_comp = 3,
  seed = 883,
  maxit = 200,
  epsilon = 1e-05,
  
  col_select = Select_sub, 
)

# the net result is mixed-bed alignment of MGKernel and MC
# (with samples indicated by `Select_sub` aligned by MC and the remaining by MGKernel)
prnHist(scale_log2r = TRUE, col_select = BI_1, filename = mix.png)


# ===================================
# (3) Mixed-bed against data subset
# ===================================
# start over
unlink(file.path(dat_dir, "Protein"), recursive = TRUE, force = TRUE)
Pep2Prn(use_unique_pep = TRUE)

prnHist(scale_log2r = TRUE, col_select = BI_1, filename = mc.png)

# (3.1) MC alignment for all samples, but only selected data rows used for normalization
standPrn(
  method_align = MC, 
  slice_peps_by = exprs(prot_n_psm >= 10),
)

prnHist(scale_log2r = TRUE, col_select = BI_1, filename = mc_selrows.png)

# (3.2) first `MGKernel` for all samples using selected data rows
standPrn(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 400, 
  maxit = 200, 
  epsilon = 1e-05,
  
  # will be forced to all samples since this is the first `MGKernel`
  # col_select = Select_sub, 

  slice_peps_by = exprs(prot_n_psm >= 10),
)

prnHist(scale_log2r = TRUE, col_select = BI_1, filename = mG_selrows.png)

# (3.3) back to MC for selected samples using selected data rows
# (mixed-bed again, but based on data subset by `prot_n_psm >= 10`)
standPrn(
  method_align = MC, 
  col_select = Select_sub, 
  slice_peps_by = exprs(prot_n_psm >= 10),
)

# side-effects comparing `MC` and `MGKernel`
# (density curves are from the preceding `MGKernel` in (3.2))
prnHist(scale_log2r = TRUE, col_select = BI_1, filename = mix_selcols_selrows.png)


# ===================================
# (4) Modified `n_comp`
# ===================================
# start over
unlink(file.path(dat_dir, "Protein"), recursive = TRUE, force = TRUE)
Pep2Prn(use_unique_pep = TRUE)

prnHist(scale_log2r = TRUE, col_select = BI_1, filename = mc.png)

# (4.1) first `MGKernel` at `n_comp = 3` for all samples
standPrn(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 400, 
  maxit = 200, 
  epsilon = 1e-05, 
)

prnHist(scale_log2r = TRUE, col_select = BI_1, filename = mG3.png)

# (4.2) a fresh start since changing `n_comp`
# (e.g. `col_select = Select_sub` ignored; instead apply `MGKernel` to all samples)
standPrn(
  method_align = MGKernel, 
  n_comp = 2, 
  seed = 400, 
  maxit = 200, 
  epsilon = 1e-05,
  
  # ignored
  col_select = Select_sub, 
)

prnHist(scale_log2r = TRUE, col_select = BI_1, filename = mG2.png)


# ===================================
# (5) housekeeping normalizers: 
#     suggest `method_align = MC`
# ===================================
# start over
unlink(file.path(dat_dir, "Protein"), recursive = TRUE, force = TRUE)
Pep2Prn(use_unique_pep = TRUE)

# initial `Protein.txt` from `Pep2Prn()` is aligned by MC
prnHist(scale_log2r = TRUE, col_select = BI_1, filename = mc.png)

# (GAPDH more abundant in W16 according to MC alignment)
prnHist(scale_log2r = TRUE, col_select = BI_1, filter_ = exprs(gene == "GAPDH"), filename = mcGAPDH.png)

# heat map
# (outputs under `Protein\\Heatmap` folder; for help, ?pepHM)
prnHM(
  col_select = BI_1, 
  xmin = -2,
  xmax = 2,
  xmargin = 0.1,
  annot_cols = c("Group", "Color", "Alpha", "Shape"),
  annot_colnames = c("Group", "Lab", "Batch", "WHIM"),
  cluster_rows = FALSE,
  annot_rows = c("gene"),
  show_rownames = TRUE,
  show_colnames = TRUE,
  fontsize_row = 10,
  cellwidth = 12,
  cellheight = 12,
  width = 18,
  height = 12,
  
  filter_by = exprs(gene \%in\% c("GAPDH")),
  filename = "mcGAPDH.png",
)

# renormalize against GAPDH
# (not `MGkernel` with few data points)
standPrn(
  method_align = MC, 
  slice_hskp = exprs(gene \%in\% c("GAPDH")),
)

# (now log2FC profiles aligned by GAPDH)
prnHist(scale_log2r = TRUE, col_select = BI_1, filename = wrong_hskp.png)

# not to keep the above example with no data under `JHU_TMT1` and `PNNL_TMT1`
# (surely need different normalizer(s))
unlink(file.path(dat_dir, "Protein"), recursive = TRUE, force = TRUE)


## Not run: 
# change to `MGKernel`
standPrn(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 400, 
  maxit = 200, 
  epsilon = 1e-05, 
)

prnHist(scale_log2r = TRUE, col_select = BI_1, filename = mG.png)

# then renormalize against data from GAPDH
# (error: too few entries for fitting with multiple Gaussians)
standPrn(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 400, 
  maxit = 200, 
  epsilon = 1e-05, 
  
  col_select = W2, 
  slice_hskp = exprs(gene \%in\% c("GAPDH")),
)
## End(Not run)

}
\seealso{
\code{\link{load_expts}} for a reduced working example in data normalization \cr

 \code{\link{normPSM}} for extended examples in PSM data normalization \cr
 \code{\link{PSM2Pep}} for extended examples in PSM to peptide summarization \cr 
 \code{\link{mergePep}} for extended examples in peptide data merging \cr 
 \code{\link{standPep}} for extended examples in peptide data normalization \cr
 \code{\link{Pep2Prn}} for extended examples in peptide to protein summarization \cr
 \code{\link{standPrn}} for extended examples in protein data normalization. \cr 
 \code{\link{purgePSM}} and \code{\link{purgePep}} for extended examples in data purging \cr
 \code{\link{pepHist}} and \code{\link{prnHist}} for extended examples in histogram visualization. \cr 
 \code{\link{extract_raws}} and \code{\link{extract_psm_raws}} for extracting MS file names \cr 
 
 \code{\link{contain_str}}, \code{\link{contain_chars_in}}, \code{\link{not_contain_str}}, 
 \code{\link{not_contain_chars_in}}, \code{\link{start_with_str}}, 
 \code{\link{end_with_str}}, \code{\link{start_with_chars_in}} and 
 \code{\link{ends_with_chars_in}} for data subsetting by character strings \cr 
 
 \code{\link{pepImp}} and \code{\link{prnImp}} for missing value imputation \cr 
 \code{\link{pepSig}} and \code{\link{prnSig}} for significance tests \cr 
 \code{\link{pepVol}} and \code{\link{prnVol}} for volcano plot visualization \cr
}
