% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proteoQ-params.R
\name{load_expts}
\alias{load_expts}
\title{Load experiments}
\usage{
load_expts(dat_dir = NULL, expt_smry = "expt_smry.xlsx",
  frac_smry = "frac_smry.xlsx")
}
\arguments{
\item{dat_dir}{A character string to the working directory.}

\item{expt_smry}{A character string to the \code{.xlsx} file containing the
metadata of TMT experiments. The default is "expt_smry.xlsx".}

\item{frac_smry}{A character string to the \code{.xlsx} file containing
peptide fractionation summary. The default is "frac_smry.xlsx".}
}
\description{
A function processes \code{.xlsx} files containing the metadata of TMT
experiments
}
\section{\code{expt_smry.xlsx}}{
 The \code{expt_smry.xlsx} files should be
 located immediately under the file folder defined by the character vector of
 \code{dat_dir}. The \code{Excel} spread sheet therein is comprised of three
 tiers of fields: (1) essential, (2) optional default and (3) optional open.
 The \code{essential} columns contain the mandatory information of TMT
 experiments. The \code{optional default} columns serve as the fields for
 default lookups in sample selection, grouping, ordering, aesthetics, etc.
 The \code{optional open} fields allow users to define their own analysis,
 aesthetics, etc.

 \tabular{ll}{ \strong{Essential column}   \tab \strong{Descrption}\cr
 Sample_ID \tab Unique sample IDs \cr TMT_Channel \tab TMT channel names:
 \code{126}, \code{127N}, \code{127C} et al. \cr TMT_Set \tab TMT experiment
 indeces  \cr LCMS_Injection   \tab LC/MS injection indeces under a
 \code{TMT_Set} \cr RAW_File \tab MS data filenames originated by
 \code{Xcalibur} with or without the \code{.raw} extension \cr Reference \tab
 Labels indicating reference samples in TMT experiments \cr }

 \code{Sample_ID}: values should be unique for entries at a unique
 combination of \code{TMT_Channel} and \code{TMT_Set}, or left blank for
 unused entries. Samples with the same indeces of \code{TMT_Channel} and
 \code{TMT_Set} but different indeces of \code{LCMS_Injection} should have
 the same value in \code{Sample_ID}. No white space or special characters are
 allowed.

 \code{RAW_File}: \code{OS} file names may be altered by MS users and thus
 different to those recorded in \code{Xcalibur}. The original names by
 \code{Xcalibur} should be used. For analysis with off-line fractionations of
 peptides before LC/MS, the \code{RAW_File} column should be left blank. The
 correspondence between the fractions and \code{RAW_File} names should be
 specified in a separate file, for example, \code{frac_smry.xlsx}.

 \code{Reference}: reference entrie(s) are indicated with non-void string(s).

 \tabular{ll}{ \strong{Optional default column}   \tab \strong{Descrption}\cr
 Select \tab Samples to be selected for indicated analysis \cr Group \tab
 Aesthetic labels annotating the prior knowledge of sample groups, e.g.,
 Ctrl_T1, Ctrl_T2, Disease_T1, Disease_T2, ...\cr Order \tab Numeric labels
 specifying the order of sample \code{groups} \cr Fill \tab Aesthetic labels
 for sample annotation by filled color\cr Color \tab Aesthetic labels for
 sample annotation by edge color\cr Shape \tab Aesthetic labels for sample
 annotation by shape\cr Size \tab Aesthetic labels for sample annotation by
 size \cr Alpha \tab Aesthetic labels for sample annotation by transparency
 \cr Benchmark \tab Indicators of benchmark sample (groups) for use in heat
 map visualizations.\cr}

 \tabular{ll}{ \strong{Exemplary optional open column}   \tab
 \strong{Descrption}\cr Term \tab Categorial terms for statistical modeling.
 \cr Duplicate \tab Indicators of duplicated samples for corrections in
 statistical significance \cr Peptide_Yield \tab Yields of peptides in sample
 handling \cr}
}

\section{\code{frac_smry.xlsx}}{
 It is not necessary to prepare a
 \code{frac_smry.xlsx} file if no peptide fractionations were performed in
 TMT experiments.

 \tabular{ll}{ \strong{Column}   \tab \strong{Descrption}\cr TMT_Set \tab
 v.s.  \cr LCMS_Injection   \tab v.s. \cr Fraction \tab Fraction indeces
 under a \code{TMT_Set} \cr RAW_File \tab v.s. }
}

\examples{
# An examplary "expt_smry.xlsx"
system.file("extdata", "expt_smry.xlsx", package = "proteoQ")

# An examplary "frac_smry.xlsx"
system.file("extdata", "frac_smry.xlsx", package = "proteoQ")

\dontrun{
# set up a working directory
dir.create("C:\\\\The\\\\Mascot\\\\Example", recursive = TRUE, showWarnings = FALSE)
dat_dir <- c("C:\\\\The\\\\Mascot\\\\Example")

# copy fasta
library(proteoQDA)
copy_refseq_hs("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq")
copy_refseq_mm("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq")

# copy Mascot PSM data
cptac_csv_1(dat_dir)

# copy "expt_smry.xlsx" and "frac_smry.xlsx"
cptac_expt_1(dat_dir)
cptac_frac_1(dat_dir)

# load experiments
library(proteoQ)
load_expts()


# process PSMs with in-function filtration of data by `filter_`
normPSM(
  group_psm_by = pep_seq, 
  group_pep_by = gene, 
  fasta = c("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_hs_2013_07.fasta", 
            "~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_mm_2013_07.fasta"), 
  rptr_intco = 3000,
  rm_craps = TRUE,
  rm_krts = FALSE,
  rm_outliers = FALSE, 
  annot_kinases = TRUE,	
  plot_rptr_int = TRUE, 
  plot_log2FC_cv = TRUE, 
  
  filter_peps = exprs(pep_expect <= .1, pep_isunique == 1), 
  filter_by_more = exprs(pep_rank == 1, pep_exp_z > 1),
)

# examplary PSM purging; n: the number of PSMs
purgePSM(max_cv = .5, min_n = 2)


# peptides results with examplary `filter_...`
normPep(
  method_psm_pep = median, 
  method_align = MGKernel, 
  range_log2r = c(5, 95), 
  range_int = c(5, 95), 
  n_comp = 3, 
  seed = 749662, 
  maxit = 200, 
  epsilon = 1e-05, 
  
  filter_by = exprs(pep_n_psm >= 2),
  # filter_by_sp = exprs(species == "human"), 
)

# examplary peptide purging; n: the number of peptides
purgePep(max_cv = .5, min_n = 2)


# proteins results with examplary `filter_...`
normPrn(
  method_pep_prn = median, 
  method_align = MGKernel, 
  range_log2r = c(20, 95), 
  range_int = c(5, 95), 
  n_comp = 2, 
  seed = 749662, 
  maxit = 200, 
  epsilon = 1e-05, 
  
  filter_by = exprs(prot_n_psm >= 5, prot_n_pep >=2), 	
)


# validation steps in next
?pepHist

}

}
