% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/params.R
\name{load_expts}
\alias{load_expts}
\title{Loads TMT or LFQ experiments}
\usage{
load_expts(
  dat_dir = NULL,
  expt_smry = "expt_smry.xlsx",
  frac_smry = "frac_smry.xlsx"
)
}
\arguments{
\item{dat_dir}{A character string to the working directory. The default is to
match the value under the global environment.}

\item{expt_smry}{A character string to a \code{.xlsx} file containing the
metadata of TMT or LFQ experiments. The default is \code{expt_smry.xlsx}.}

\item{frac_smry}{A character string to a \code{.xlsx} file containing peptide
fractionation summary. The default is \code{frac_smry.xlsx}.}
}
\description{
\code{load_expts} processes \code{.xlsx} or \code{.csv} files containing the
metadata of TMT or LFQ experiments. For simplicity, \code{.xlsx} will be
assumed in the document.
}
\section{\code{expt_smry.xlsx}}{
 The \code{expt_smry.xlsx} files should be
 placed immediately under the file folder defined by \code{dat_dir}. The tab
 containing the metadata of TMT or LFQ experiments should be named
 \code{Setup}. The \code{Excel} spread sheet therein is comprised of three
 tiers of fields: (1) essential, (2) optional default and (3) optional open.
 The \code{essential} columns contain the mandatory information of the
 experiments. The \code{optional default} columns serve as the fields for
 default lookups in sample selection, grouping, ordering, aesthetics, etc.
 The \code{optional open} fields allow users to define their own analysis,
 aesthetics, etc.

 \tabular{ll}{ \strong{Essential column}   \tab \strong{Descrption}\cr
 Sample_ID \tab Unique sample IDs \cr TMT_Channel \tab TMT channel names:
 \code{126}, \code{127N}, \code{127C} etc. (left void for LFQ) \cr TMT_Set
 \tab TMT experiment indexes 1, 2, 3, ... (auto-filled for LFQ) \cr
 LCMS_Injection   \tab LC/MS injection indexes 1, 2, 3, ... under a
 \code{TMT_Set} \cr RAW_File \tab MS data file names originated by \code{MS}
 software(s) \cr Reference \tab Labels indicating reference samples in TMT or
 LFQ experiments \cr }

 \code{Sample_ID}: values should be unique for entries at a unique
 combination of \code{TMT_Channel} and \code{TMT_Set}, or voided for unused
 entries. Samples with the same indexes of \code{TMT_Channel} and
 \code{TMT_Set} but different indexes of \code{LCMS_Injection} should have
 the same value in \code{Sample_ID}. No white space or special characters are
 allowed. See also posts for
 \href{https://proteoq.netlify.app/post/sample-exlusion-from-metadata}{sample
 exclusion}.

 \code{RAW_File}: (a) for analysis with off-line fractionation of peptides
 before LC/MS, values under the \code{RAW_File} column should be left void.
 Instead, the correspondence between the fraction numbers and \code{RAW_File}
 names should be specified in a separate file, for example,
 \code{frac_smry.xlsx}. (2) For analysis without off-line fractionation, it
 is recommended as well to leave the field under the \code{RAW_File} column
 blank and instead enter the MS file names in \code{frac_smry.xlsx}.

 The set of \code{RAW_File} names in metadata needs to be identifiable in PSM
 data. Impalpable mismatches might occur when \code{OS} file names were
 altered by MS users and thus different to those recorded internally in MS
 data for parsing by search engine(s). In the case, machine-generated MS file
 names should be used. In addition, MS files may occasionally have no
 contributions to PSM findings. In the case, users will be prompted to remove
 these MS file names.

 Utilities \code{\link{extract_raws}} and \code{\link{extract_psm_raws}} may
 aid matching MS file names between metadata and PSM data. Utility
 \code{\link{extract_raws}} extracts the names of MS files under a file
 folder. Utility \code{\link{extract_psm_raws}} extracts the names of MS
 files that are available in PSM data.

 \code{Reference}: reference entry(entries) are indicated with non-void
 string(s).

 \tabular{ll}{ \strong{Optional default column}   \tab \strong{Descrption}\cr
 Select \tab Samples to be selected for indicated analysis \cr Group \tab
 Aesthetic labels annotating the prior knowledge of sample groups, e.g.,
 Ctrl_T1, Ctrl_T2, Disease_T1, Disease_T2, ...\cr Order \tab Numeric labels
 specifying the order of sample \code{groups} \cr Fill \tab Aesthetic labels
 for sample annotation by filled color\cr Color \tab Aesthetic labels for
 sample annotation by edge color\cr Shape \tab Aesthetic labels for sample
 annotation by shape\cr Size \tab Aesthetic labels for sample annotation by
 size \cr Alpha \tab Aesthetic labels for sample annotation by transparency
 \cr \cr}

 \tabular{ll}{ \strong{Exemplary optional open column}   \tab
 \strong{Descrption}\cr Term \tab Categorical terms for statistical modeling.
 \cr Peptide_Yield \tab Yields of peptides in sample handling \cr}
}

\section{\code{frac_smry.xlsx}}{
 \tabular{ll}{ \strong{Column}   \tab
 \strong{Descrption}\cr Sample_ID \tab Unique sample IDs (only required with
 LFQ) \cr TMT_Set \tab TMT experiment indexes (auto-filled for LFQ) \cr
 LCMS_Injection \tab LC/MS injection indexes \cr Fraction \tab Fraction
 indexes under a \code{TMT_Set} \cr RAW_File \tab MS data file names \cr
 PSM_File \tab Names of PSM files. Required only when one \code{RAW_File} can
 be linked to multiple PSM files (e.g. F012345.csv and F012346.csv both from
 ms_1.raw). }
}

\examples{
\donttest{
# ***********************************
# ************    TMT    ************
# ***********************************
  
# ===================================
# Fasta and PSM files
# ===================================
# fasta (all platforms)
library(proteoQDA)
fasta_dir <- "~/proteoQ/dbs/fasta/refseq"
copy_refseq_hs(fasta_dir)
copy_refseq_mm(fasta_dir)

# working directory (all platforms)
dat_dir <- "~/proteoQ/examples"

# metadata (all platforms)
copy_exptsmry_gtmt(dat_dir)
copy_fracsmry_gtmt(dat_dir)

# PSM (choose one of the platforms)
choose_one <- TRUE
if (!choose_one) {
  ## Mascot
  copy_mascot_gtmt(dat_dir)
  
  ## or MaxQuant
  # copy_maxquant_gtmt(dat_dir)
  
  ## or MSFragger
  # copy_msfragger_gtmt(dat_dir)
  
  ## or Spectrum Mill
  # copy_specmill_gtmt(dat_dir)
}

# ===================================
# PSM, peptide and protein processing
# ===================================
library(proteoQ)
load_expts("~/proteoQ/examples")

# PSM data standardization
normPSM(
  group_psm_by = pep_seq_mod, 
  group_pep_by = gene, 
  annot_kinases = TRUE, 
  
  # no default and required
  fasta = c("~/proteoQ/dbs/fasta/refseq/refseq_hs_2013_07.fasta",
            "~/proteoQ/dbs/fasta/refseq/refseq_mm_2013_07.fasta"),
)

# optional PSM purging
purgePSM()

# PSMs to peptides
PSM2Pep()

# peptide data merging
mergePep()

# peptide data standardization
standPep()

# peptide data histograms
pepHist()

# optional peptide purging
purgePep()

# peptides to proteins
Pep2Prn(use_unique_pep = TRUE)

# protein data standardization
standPrn()

# protein data histograms
prnHist()

# ===================================
# Optional significance tests
# (no NA imputation)
# ===================================
pepSig(
  W2_bat = ~ Term["W2.BI.TMT2-W2.BI.TMT1", 
                  "W2.JHU.TMT2-W2.JHU.TMT1", 
                  "W2.PNNL.TMT2-W2.PNNL.TMT1"],
  W2_loc = ~ Term_2["W2.BI-W2.JHU", 
                    "W2.BI-W2.PNNL", 
                    "W2.JHU-W2.PNNL"],
  W16_vs_W2 = ~ Term_3["W16-W2"], 
)

prnSig()

# ===================================
# optional NA imputation
# ===================================
pepImp(m = 2, maxit = 2)
prnImp(m = 5, maxit = 5)

# ===================================
# Optional significance tests
# (with NA imputation)
# ===================================
pepSig(
  impute_na = TRUE, 
  W2_bat = ~ Term["W2.BI.TMT2-W2.BI.TMT1", 
                  "W2.JHU.TMT2-W2.JHU.TMT1", 
                  "W2.PNNL.TMT2-W2.PNNL.TMT1"],
  W2_loc = ~ Term_2["W2.BI-W2.JHU", 
                    "W2.BI-W2.PNNL", 
                    "W2.JHU-W2.PNNL"],
  W16_vs_W2 = ~ Term_3["W16-W2"], 
)

prnSig(impute_na = TRUE)



# ***********************************
# ************    LFQ    ************
# ***********************************

# ===================================
# Fasta and PSM files
# ===================================
# fasta (all platforms)
library(proteoQDA)
fasta_dir <- "~/proteoQ/dbs/fasta/uniprot"
copy_uniprot_hsmm(fasta_dir)

# working directory (all platforms)
dat_dir <- "~/proteoQ/examples"

# metadata (all platforms)
copy_exptsmry_plfq(dat_dir)
copy_fracsmry_plfq(dat_dir)

# PSM (choose one of the platforms)
choose_one <- TRUE
if (!choose_one) {
  ## Mascot
  copy_mascot_plfq(dat_dir)
  
  ## or MaxQuant
  # copy_maxquant_plfq(dat_dir)
  
  ## or MSFragger
  # copy_msfragger_plfq(dat_dir)
  
  ## or Spectrum Mill
  # copy_specmill_plfq(dat_dir)
}


# ===================================
# PSM, peptide and protein processing
# ===================================
library(proteoQ)
load_expts("~/proteoQ/examples")

# PSM data standardization
normPSM(
  group_psm_by = pep_seq_mod, 
  group_pep_by = gene, 
  annot_kinases = TRUE, 
  fasta = c("~/proteoQ/dbs/fasta/uniprot/uniprot_hsmm_2020_03.fasta"),
)

# PSM purging not applicable with LFQ
# purgePSM()

# PSMs to peptides
PSM2Pep()

# peptide data merging
mergePep()

# peptide data standardization
standPep()

# peptide data histograms
pepHist()

# optional peptide purging
purgePep()

# peptides to proteins
Pep2Prn(use_unique_pep = TRUE)

# protein data standardization
standPrn()

# protein data histograms
prnHist()

# ===================================
# Optional significance tests
# (no NA imputation)
# ===================================
pepSig(
  fml_1 = ~ Term["BI-JHU", 
                 "JHU-PNNL", 
                 "(BI+JHU)/2-PNNL"],
)

prnSig()

# ===================================
# optional NA imputation
# ===================================
pepImp(m = 2, maxit = 2)
prnImp(m = 5, maxit = 5)

# ===================================
# Optional significance tests
# (with NA imputation)
# ===================================
pepSig(
  impute_na = TRUE, 
  fml_1 = ~ Term["BI-JHU", 
                 "JHU-PNNL", 
                 "(BI+JHU)/2-PNNL"],
)

prnSig(impute_na = TRUE)
}


\dontrun{
load_expts(dat_dir = "~/proteoQ/examples", expt_smry = "expt_smry.xlsx")

# not working; `expt_smry = my_expt` is an expression
my_expt <- "expt_smry.xlsx"
load_expts(dat_dir = "~/proteoQ/examples", expt_smry = my_expt)

# need unquoting; 
# see also: https://dplyr.tidyverse.org/articles/programming.html
load_expts(dat_dir = "~/proteoQ/examples", expt_smry = !!my_expt)
}



}
\seealso{
\emph{Data normalization} \cr \code{\link{normPSM}} for extended
 examples in PSM data normalization \cr \code{\link{PSM2Pep}} for extended
 examples in PSM to peptide summarization \cr \code{\link{mergePep}} for
 extended examples in peptide data merging \cr \code{\link{standPep}} for
 extended examples in peptide data normalization \cr \code{\link{Pep2Prn}}
 for extended examples in peptide to protein summarization \cr
 \code{\link{standPrn}} for extended examples in protein data normalization.
 \cr \code{\link{purgePSM}} and \code{\link{purgePep}} for extended examples
 in data purging \cr \code{\link{pepHist}} and \code{\link{prnHist}} for
 extended examples in histogram visualization. \cr \code{\link{extract_raws}}
 and \code{\link{extract_psm_raws}} for extracting MS file names \cr

\emph{User-friendly utilities for variable arguments of `filter_...`}
 \cr \code{\link{contain_str}}, \code{\link{contain_chars_in}},
 \code{\link{not_contain_str}}, \code{\link{not_contain_chars_in}},
 \code{\link{start_with_str}}, \code{\link{end_with_str}},
 \code{\link{start_with_chars_in}} and \code{\link{ends_with_chars_in}} for
 data subsetting by character strings \cr

\emph{Missing values} \cr \code{\link{pepImp}} and
 \code{\link{prnImp}} for missing value imputation \cr

\emph{Informatics} \cr \code{\link{pepSig}} and \code{\link{prnSig}}
 for significance tests \cr \code{\link{pepVol}} and \code{\link{prnVol}} for
 volcano plot visualization \cr \code{\link{prnGSPA}} for gene set enrichment
 analysis by protein significance pVals \cr \code{\link{gspaMap}} for mapping
 GSPA to volcano plot visualization \cr \code{\link{prnGSPAHM}} for heat map
 and network visualization of GSPA results \cr \code{\link{prnGSVA}} for gene
 set variance analysis \cr \code{\link{prnGSEA}} for data preparation for
 online GSEA. \cr \code{\link{pepMDS}} and \code{\link{prnMDS}} for MDS
 visualization \cr \code{\link{pepPCA}} and \code{\link{prnPCA}} for PCA
 visualization \cr \code{\link{pepLDA}} and \code{\link{prnLDA}} for LDA
 visualization \cr \code{\link{pepHM}} and \code{\link{prnHM}} for heat map
 visualization \cr \code{\link{pepCorr_logFC}}, \code{\link{prnCorr_logFC}},
 \code{\link{pepCorr_logInt}} and \code{\link{prnCorr_logInt}}  for
 correlation plots \cr \code{\link{anal_prnTrend}} and
 \code{\link{plot_prnTrend}} for trend analysis and visualization \cr
 \code{\link{anal_pepNMF}}, \code{\link{anal_prnNMF}},
 \code{\link{plot_pepNMFCon}}, \code{\link{plot_prnNMFCon}},
 \code{\link{plot_pepNMFCoef}}, \code{\link{plot_prnNMFCoef}} and
 \code{\link{plot_metaNMF}} for NMF analysis and visualization \cr

 \emph{Custom databases} \cr \code{\link{Uni2Entrez}} for lookups between
 UniProt accessions and Entrez IDs \cr \code{\link{Ref2Entrez}} for lookups
 among RefSeq accessions, gene names and Entrez IDs \cr \code{\link{prepGO}}
 for
 \code{\href{http://current.geneontology.org/products/pages/downloads.html}{gene
  ontology}} \cr \code{\link{prepMSig}} for
 \href{https://data.broadinstitute.org/gsea-msigdb/msigdb/release/7.0/}{molecular
  signatures} \cr \code{\link{prepString}} and \code{\link{anal_prnString}}
 for STRING-DB \cr

 \emph{Workflow scripts} \cr # TMT \cr system.file("extdata",
 "workflow_tmt_base.R", package = "proteoQ") \cr system.file("extdata",
 "workflow_tmt_ext.R", package = "proteoQ") \cr

 # LFQ \cr system.file("extdata", "workflow_lfq_base.R", package = "proteoQ")
 \cr

 \emph{Metadata files} \cr # TMT, no fractionation --- OK without
 `frac_smry.xlsx` \cr # (a. no references) \cr system.file("extdata",
 "expt_smry_no_prefrac.xlsx", package = "proteoQDA") \cr # (b. W2 and W16
 references) \cr system.file("extdata",
 "expt_smry_no_prefrac_ref_w2_w16.xlsx", package = "proteoQDA") \cr

 # TMT, prefractionation \cr # (a. no references) \cr system.file("extdata",
 "expt_smry_gtmt.xlsx", package = "proteoQDA") \cr system.file("extdata",
 "frac_smry_gtmt.xlsx", package = "proteoQDA") \cr

 # (b. W2 references) \cr system.file("extdata", "expt_smry_ref_w2.xlsx",
 package = "proteoQDA") \cr system.file("extdata", "frac_smry_gtmt.xlsx",
 package = "proteoQDA") \cr

 # (c. W2 and W16 references) \cr system.file("extdata",
 "expt_smry_ref_w2_w16.xlsx", package = "proteoQDA") \cr
 system.file("extdata", "frac_smry_gtmt.xlsx", package = "proteoQDA") \cr

 # TMT, prefractionation (global + phospho) \cr system.file("extdata",
 "expt_smry_tmt_cmbn.xlsx", package = "proteoQDA") \cr system.file("extdata",
 "frac_smry_tmt_cmbn.xlsx", package = "proteoQDA") \cr

 # TMT, prefractionation, one MS to multiple PSM files \cr
 system.file("extdata", "expt_smry_psmfiles.xlsx", package = "proteoQDA") \cr
 system.file("extdata", "frac_smry_psmfiles.xlsx", package = "proteoQDA") \cr

 # TMT, prefractionation, mixed-plexes \cr # (column PSM_File needed; as with
 this example, \cr #  mixed-plexes results are actually from the same MS
 files \cr #  but searched separately at 6- and 10-plex settings!) \cr
 system.file("extdata", "expt_smry_mixplexes.xlsx", package = "proteoQDA")
 \cr system.file("extdata", "frac_smry_mixplexes.xlsx", package =
 "proteoQDA") \cr

 # LFQ, prefractionation \cr system.file("extdata", "expt_smry_plfq.xlsx",
 package = "proteoQDA") \cr system.file("extdata", "frac_smry_plfq.xlsx",
 package = "proteoQDA") \cr

 \emph{Column keys in PSM, peptide and protein outputs} \cr
 system.file("extdata", "psm_keys.txt", package = "proteoQ") \cr
 system.file("extdata", "peptide_keys.txt", package = "proteoQ") \cr
 system.file("extdata", "protein_keys.txt", package = "proteoQ") \cr

\emph{MS1 peptide masses} \cr \code{\link[proteoM]{calc_pepmasses}}
 for mono-isotopic masses of peptides from fasta databases \cr
 \code{\link[proteoM]{calc_monopeptide}} for mono-isotopic masses of peptides
 from individual sequences \cr \code{\link[proteoM]{parse_unimod}} for
 parsing \href{https://www.unimod.org/}{Unimod} fixed modifications, variable
 modifications and neutral losses. \cr \code{\link[proteoM]{find_unimod}} for
 finding a Unimod
}
\concept{Monoisotopic masses of peptides}
\concept{basic informatics}
\concept{data row filtration}
\concept{missing value imputation}
\concept{normalization functions}
