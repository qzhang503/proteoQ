% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proteoQ-corrplots.R
\name{proteoCorr}
\alias{proteoCorr}
\alias{pepCorr_logFC}
\alias{pepCorr_logInt}
\alias{prnCorr_logFC}
\alias{prnCorr_logInt}
\title{Correlation Plots}
\usage{
proteoCorr(id = c("pep_seq", "pep_seq_mod", "prot_acc", "gene"),
  data_select = c("logFC", "logInt"), col_select = NULL,
  col_order = NULL, scale_log2r = TRUE, df = NULL, filepath = NULL,
  filename = NULL, ...)

pepCorr_logFC(...)

pepCorr_logInt(...)

prnCorr_logFC(...)

prnCorr_logInt(...)
}
\arguments{
\item{id}{Character string to indicate the type of data. The value will be
determined automatically. Peptide data will be used at \code{id = pep_seq}
or \code{pep_seq_mod}, and protein data will be used at \code{id = prot_acc}
or \code{gene}.}

\item{data_select}{The subset of data to be selected. At default, \code{logFC}
will be used; at \code{logInt}, intensity with \code{log10} transformation
will be used.}

\item{col_select}{Character string to a column key in \code{expt_smry.xlsx}.
Samples corresponding to non-empty entries under the column key will be
included in the indicated analysis. At the \code{NULL} default, the column
key will be \code{Select}.}

\item{col_order}{Character string to a column key in \code{expt_smry.xlsx}.
Numeric values under which will be used for the left-to-right arrangement of
samples in plots. At the NULL default, the column key \code{Order} will be
used.}

\item{scale_log2r}{Logical; if TRUE, adjusts \code{log2FC} to the same scale
of standard deviation across all samples.}

\item{df}{The name of input data file. By default, it will be determined
automatically by the value of \code{id}.}

\item{filepath}{A file path to output results. By default, it will be
determined automatically by the name of the calling function and the value
of \code{id} in the \code{call}.}

\item{filename}{A representative file name to output image(s). By default, it
will be determined automatically by the name of the current \code{call}. The
image(s) are saved via \code{\link[ggplot2]{ggsave}} where the image type
will be determined by the extension of the file name. A \code{.png} format
will be used at default or at an unrecognized file extension.}

\item{...}{\code{filter_}: Logical expression(s) for the row filtration of
data; also see \code{\link{normPSM}}. \cr Additional parameters for
plotting: \cr \code{width}, the width of plot \cr \code{height}, the height
of plot \cr \code{xmin}, the minimum \eqn{x} of logFC or intensity \cr
\code{xmax}, the maximum \eqn{x} of logFC data or intensity data \cr
\code{xbreaks}, the breaks on \eqn{x} axis; the same breaks will be applied
to \eqn{y} axis.}
}
\value{
Correlation plots.
}
\description{
\code{proteoCorr} plots Pearson correlation for both \code{logFC} and
\code{intensity} data. Users should avoid call the method directly, but
instead use the following wrappers.

\code{pepCorr_logFC} is a wrapper of \code{\link{proteoCorr}} for peptide logFC
data.

\code{pepCorr_logInt} is a wrapper of \code{\link{proteoCorr}} for peptide
intensity data.

\code{prnCorr_logFC} is a wrapper of \code{\link{proteoCorr}} for protein
logFC data.

\code{prnCorr_logInt} is a wrapper of \code{\link{proteoCorr}} for protein
intensity data.
}
\details{
The function matches the current \code{id} to the grouping argument in the
latest \code{call} to \code{\link{normPSM}}. See also \code{\link{prnHist}}
for details.
}
\examples{
# ===================================
# Prerequisite Fasta and PSM files
# ===================================
library(proteoQDA)
fasta_dir <- "~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq"
dir.create(fasta_dir, recursive = TRUE, showWarnings = FALSE)
copy_refseq_hs(fasta_dir)
copy_refseq_mm(fasta_dir)

## RUN `Mascot or Maxquant but not both`
dontrun <- TRUE
if (!dontrun) {
  ## Mascot
  dat_dir <- "C:\\\\The\\\\Mascot\\\\Example"
  dir.create(dat_dir, recursive = TRUE, showWarnings = FALSE)
  cptac_csv_1(dat_dir)
  cptac_expt_1(dat_dir)
  cptac_frac_1(dat_dir)
  
	
  ## Maxquant
  #  to install package `proteoQDB` containing MaxQuant examples: 
  #  (1) clone https://github.com/qiangzhang503/proteoQDB.git through `Github Desktop`
  #  (2) local installation of proteoQDB, e.g., devtools::install("~\\\\my_dir\\\\proteoQDB")
  library(proteoQDB)
  dat_dir <- c("C:\\\\The\\\\MQ\\\\Example")
  dir.create(dat_dir, recursive = TRUE, showWarnings = FALSE)
  cptac_mqpsm_txt(dat_dir)
  cptac_mqpsm_expt(dat_dir)
  cptac_mqpsm_frac(dat_dir)	
}
## END of RUN `Mascot or Maxquant but not both`


# ===================================
# Prerequisite PSM normalization
# ===================================
library(proteoQ)

## RUN `Mascot or Maxquant but not both`
dontrun <- TRUE
if (!dontrun) {
  ## Mascot
  dat_dir <- "C:\\\\The\\\\Mascot\\\\Example"
  
	
  ## Maxquant
  dat_dir <- c("C:\\\\The\\\\MQ\\\\Example")
}
## END of RUN `Mascot or Maxquant but not both`

dir.create(dat_dir, recursive = TRUE, showWarnings = FALSE)

load_expts()

normPSM(
  group_psm_by = pep_seq_mod, 
  fasta = c("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_hs_2013_07.fasta", 
            "~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_mm_2013_07.fasta"), 
)


# ===================================
# Prerequisite peptide normalization
# ===================================
normPep(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 749662, 
)


# ===================================
# Prerequisite protein normalization
# ===================================
normPrn(
  method_align = MGKernel, 
  n_comp = 2, 
  seed = 749662, 
)


# ===================================
# Optional NA imputation
# ===================================
# peptide
pepImp(m = 2, maxit = 2)

# protein
prnImp(m = 5, maxit = 5)



# ===================================
# Correlation
# ===================================
scale_log2r <- TRUE

# peptide data with sample ID ordering
pepCorr_logFC(
 col_order = Order, 
 width = 10,
 height = 10,
 filter_by = exprs(pep_n_psm >= 3),
 filename = pepcorr_logfc_npsm3.png,
)

# peptide intensity
pepCorr_logInt(
 width = 10,
 height = 10,
 filter_by = exprs(pep_n_psm >= 3),
 filename = pepcorr_int_npsm3.png,
)

# protein log2FC
prnCorr_logFC(
 width = 10,
 height = 10,
 filter_npep = exprs(prot_n_pep >= 5),
 filename = prncorr_logfc_npep5.png,
)

# protein intensity
prnCorr_logInt(
 width = 10,
 height = 10,
 filter_npep = exprs(prot_n_pep >= 5),
 filename = prncorr_int_npep5.png,
)

}
