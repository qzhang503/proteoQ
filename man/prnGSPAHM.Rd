% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proteoQ-gspa.R
\name{prnGSPAHM}
\alias{prnGSPAHM}
\title{Heat map visualization of GSPA results}
\usage{
prnGSPAHM(annot_cols = NULL, annot_colnames = NULL,
  annot_rows = NULL, ...)
}
\arguments{
\item{annot_cols}{A character vector of column keys that can be found in
\code{essmap_.*.csv}. The values under the selected keys will be used to
color-code enrichment terms on the top of heat maps.}

\item{annot_colnames}{A character vector of replacement name(s) to
\code{annot_cols}.}

\item{annot_rows}{A character vector of column keys that can be found from
\code{essmeta_.*.csv} . The values under the selected keys will be used to
color-code essential terms on the side of heat maps.}

\item{...}{\code{filter_}: Logical expression(s) for the row filtration of
data; also see \code{\link{normPSM}}. \cr \cr Additional arguments for
\code{\link[pheatmap]{pheatmap}}, i.e., \code{fontsize }... \cr Note
arguments disabled from \code{pheatmap}: \cr \code{annotation_col}; instead
use keys indicated in \code{annot_cols} \cr \code{annotation_row}; instead
use keys indicated in \code{annot_rows}}
}
\description{
\code{prnGSPAHM} visualizes distance heat maps between essential and all gene
sets.
}
\details{
The list of gene sets and the associative quality metrics of \code{size} and
\code{ess_size} are assessed after data filtration with the criteria specified
by arguments \code{pval_cutoff} and \code{logFC_cutoff}, as well as optional
varargs of \code{filter_}.
}
\section{\code{Protein_GSPA_...csv}}{


 \tabular{ll}{ \strong{Key}   \tab \strong{Descrption}\cr term \tab a gene
 set term \cr is_essential \tab a logicial indicator of gene set essentiality
 \cr size \tab the number of IDs under a \code{term} \cr ess_size \tab the
 number of IDs that can be found under a corresponding essential set \cr
 contrast \tab a contrast of sample groups \cr p_val \tab significance p
 values \cr q_val \tab \code{p_val} with \code{BH} adjustment of multiple
 tests \cr log2fc \tab the fold change of a gene set at logarithmic base of 2
 \cr }
}

\section{\code{essmap_Protein_GSPA_...csv}}{


 \tabular{ll}{ \strong{Key}   \tab \strong{Descrption}\cr term \tab a gene
 set term \cr ess_term \tab an essential gene set term \cr size \tab the
 number of IDs under a \code{term} with matches to an \code{ess_term} \cr
 ess_size \tab the number of essential IDs under a \code{term} with matches
 to an \code{ess_term} \cr fraction \tab a fraction of matches in IDs between
 a \code{term} and a \code{ess_term} \cr distance \tab 1 - \code{fraction}
 \cr idx \tab a numeric index of \code{term} \cr ess_idx \tab a numeric index
 of \code{ess_term} \cr }
}

\examples{
# ===================================
# Prerequisite Fasta and PSM files
# ===================================
library(proteoQDA)
fasta_dir <- "~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq"
dir.create(fasta_dir, recursive = TRUE, showWarnings = FALSE)
copy_refseq_hs(fasta_dir)
copy_refseq_mm(fasta_dir)

## RUN `Mascot or Maxquant but not both`
dontrun <- TRUE
if (!dontrun) {
  ## Mascot
  dat_dir <- "C:\\\\The\\\\Mascot\\\\Example"
  dir.create(dat_dir, recursive = TRUE, showWarnings = FALSE)
  cptac_csv_1(dat_dir)
  cptac_expt_1(dat_dir)
  cptac_frac_1(dat_dir)
  
	
  ## Maxquant
  #  to install package `proteoQDB` containing MaxQuant examples: 
  #  (1) clone https://github.com/qiangzhang503/proteoQDB.git through `Github Desktop`
  #  (2) local installation of proteoQDB, e.g., devtools::install("~\\\\my_dir\\\\proteoQDB")
  library(proteoQDB)
  dat_dir <- c("C:\\\\The\\\\MQ\\\\Example")
  dir.create(dat_dir, recursive = TRUE, showWarnings = FALSE)
  cptac_mqpsm_txt(dat_dir)
  cptac_mqpsm_expt(dat_dir)
  cptac_mqpsm_frac(dat_dir)	
}
## END of RUN `Mascot or Maxquant but not both`


# ===================================
# Prerequisite PSM normalization
# ===================================
library(proteoQ)

## RUN `Mascot or Maxquant but not both`
dontrun <- TRUE
if (!dontrun) {
  ## Mascot
  dat_dir <- "C:\\\\The\\\\Mascot\\\\Example"
  
	
  ## Maxquant
  dat_dir <- c("C:\\\\The\\\\MQ\\\\Example")
}
## END of RUN `Mascot or Maxquant but not both`

dir.create(dat_dir, recursive = TRUE, showWarnings = FALSE)

load_expts()

normPSM(
  group_psm_by = pep_seq_mod, 
  fasta = c("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_hs_2013_07.fasta", 
            "~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_mm_2013_07.fasta"), 
)


# ===================================
# Prerequisite peptide normalization
# ===================================
normPep(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 749662, 
)


# ===================================
# Prerequisite protein normalization
# ===================================
normPrn(
  method_align = MGKernel, 
  n_comp = 2, 
  seed = 749662, 
)


# ===================================
# Optional NA imputation
# ===================================
# peptide
pepImp(m = 2, maxit = 2)

# protein
prnImp(m = 5, maxit = 5)



# ===================================
# Prerequisite significance tests
# for use with `pepVol` and `prnVol`
# ===================================
scale_log2r <- TRUE

## RUN `Mascot or Maxquant but not both`
dontrun <- TRUE
if (!dontrun) {
  ## Mascot
  # peptide significance tests
	# (1a) no NA imputation; output: Peptide_pVals.txt
  pepSig(
    impute_na = FALSE, 
    W2_bat = ~ Term["(W2.BI.TMT2-W2.BI.TMT1)", "(W2.JHU.TMT2-W2.JHU.TMT1)", "(W2.PNNL.TMT2-W2.PNNL.TMT1)"], # batch effects
    W2_loc = ~ Term_2["W2.BI-W2.JHU", "W2.BI-W2.PNNL", "W2.JHU-W2.PNNL"], # location effects
    W16_vs_W2 = ~ Term_3["W16-W2"], 
  )
	
  # (1b) or NA imputation; output: Peptide_impNA_pvals.txt
  pepSig(
    impute_na = TRUE, 
    W2_bat = ~ Term["(W2.BI.TMT2-W2.BI.TMT1)", "(W2.JHU.TMT2-W2.JHU.TMT1)", "(W2.PNNL.TMT2-W2.PNNL.TMT1)"], # batch effects
    W2_loc = ~ Term_2["W2.BI-W2.JHU", "W2.BI-W2.PNNL", "W2.JHU-W2.PNNL"], # location effects
    W16_vs_W2 = ~ Term_3["W16-W2"], 
  )	
  
  # protein significance tests
  # all formulae in the latest `pepSig()` will be assessed by default 
  # (2a) no NA imputation; output: Protein_pVals.txt
  prnSig(impute_na = FALSE)
  
  # (2b) or NA imputation; output: Protein_impNA_pvals.txt
  prnSig(impute_na = TRUE)
	
	
  ## MaxQuant
  # peptide significance tests
	# (1a) no NA imputation; output: Peptide_pVals.txt
  pepSig(
    impute_na = FALSE, 
    W16_vs_W2_fine = ~ Term["W16.BI-W2.BI", "W16.JHU-W2.JHU", "W16.PNNL-W2.PNNL"],
    W16_vs_W2_course = ~ Term_2["W16-W2"], 
  )
	
  # (1b) or NA imputation; output: Peptide_impNA_pvals.txt
  pepSig(
    impute_na = TRUE, 
    W16_vs_W2_fine = ~ Term["W16.BI-W2.BI", "W16.JHU-W2.JHU", "W16.PNNL-W2.PNNL"],
    W16_vs_W2_course = ~ Term_2["W16-W2"], 
  )		
  
  # protein significance tests
	# formula(e) in the latest `pepSig()` will be taken by default
  # (2a) no NA imputation; output: Protein_pVals.txt
  prnSig(impute_na = FALSE)
  
  # (2b) or NA imputation; output: Protein_impNA_pvals.txt
  prnSig(impute_na = TRUE)
}
## END of RUN `Mascot or Maxquant but not both`


# ===================================
# Prerequisite gene-set tests
# for use with `gspaMap()`
# ===================================
prnGSPA(
  pval_cutoff = 5E-2,
  logFC_cutoff = log2(1.2),
  gspval_cutoff = 5E-2,
  gset_nms = c("go_sets", "kegg_sets"),
  impute_na = FALSE,
)



# ===================================
# Distance heat maps of gene sets
# (also interactive networks)
# ===================================
# a `term` is a subset of an `ess_term` if the distance is zero
# `ess_idx` is a column key in `essmap_.*.csv`
# `ess_size` is a column key in metadata file `essmeta_.*.csv`
prnGSPAHM(
  filter_by = exprs(distance <= .6),
  annot_cols = "ess_idx",
  annot_colnames = "Eset index",
  annot_rows = "ess_size",
  filename = show_some_redundancy.png,
)

# human terms only
prnGSPAHM(
  filter_num = exprs(distance <= .95),
  filter_sp = exprs(start_with_str("hs", term)),
  annot_cols = "ess_idx",
  annot_colnames = "Eset index",
  filename = show_more_connectivity.png,
)

# custom color palette
prnGSPAHM(
  annot_cols = c("ess_idx", "ess_size"),
  annot_colnames = c("Eset index", "Size"),
  filter_by = exprs(distance <= .95),
  color = colorRampPalette(c("blue", "white", "red"))(100),
  filename = "custom_colors.png",
)



}
\seealso{
\code{\link{prnGSPA}} for gene set enrichment analysis.
}
