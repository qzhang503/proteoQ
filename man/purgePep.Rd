% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proteoQ-purge.R
\name{purgePep}
\alias{purgePep}
\title{Purge peptide data}
\usage{
purgePep(dat_dir = NULL, pt_cv = NULL, max_cv = NULL,
  adjSD = FALSE, keep_ohw = TRUE, col_select = NULL,
  col_order = NULL, filename = NULL, ...)
}
\arguments{
\item{dat_dir}{A character string to the working directory.}

\item{pt_cv}{Numeric between 0 and 1; the percentile of CV. Values above the
percentile threshold will be replaced with NA.}

\item{max_cv}{Numeric; the cut-off in maximum CV. Values above the threshold
will be replaced with NA.}

\item{adjSD}{Logical; if TRUE, adjust the standard deviation in relative to
the width of ratio profiles.}

\item{keep_ohw}{Logical; if TRUE, keep one-hit-wonders with unknown CV. The
default is TRUE.}

\item{col_select}{Character string to a column key in \code{expt_smry.xlsx}.
Samples corresponding to non-empty entries under the column key will be
included in the indicated analysis. At the \code{NULL} default, the column
key will be \code{Select}.}

\item{filename}{A representative file name to output image(s). By default, it
will be determined automatically by the name of the current \code{call}. The
image(s) are saved via \code{\link[ggplot2]{ggsave}} where the image type
will be determined by the extension of the file name. A \code{.png} format
will be used at default or at an unrecognized file extension.}

\item{...}{Additional parameters for plotting: \cr \code{ymax}, the maximum
\eqn{y} at a log2 scale; the default is +0.6. \cr \code{ybreaks}, the breaks
in \eqn{y}-axis at a log2 scale; the default is 0.2. \cr \code{width}, the
width of plot. \cr \code{height}, the height of plot. \cr \code{flip_coord},
logical; if TRUE, flip \code{x} and \code{y} axis.}
}
\description{
\code{purgePep} removes \code{protein} entries from peptide table(s) by
selection criteria.
}
\details{
The CV of proteins under each sample are first calculated from contributing
peptides. In the event of multiple sereis of LC/MS injections, the CV of the
same protein from different LC/MS will be summarised by median statistics.

The data nullification will be applied column-wisely for all available
samples. Argument \code{col_select} is merely used to subsettng samples for
violin plot visualization.
}
\examples{
# ===================================
# Prerequisite Fasta and PSM files
# ===================================
library(proteoQDA)
fasta_dir <- "~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq"
dir.create(fasta_dir, recursive = TRUE, showWarnings = FALSE)
copy_refseq_hs(fasta_dir)
copy_refseq_mm(fasta_dir)

## RUN `Mascot or Maxquant but not both`
dontrun <- TRUE
if (!dontrun) {
  ## Mascot
  dat_dir <- "C:\\\\The\\\\Mascot\\\\Example"
  dir.create(dat_dir, recursive = TRUE, showWarnings = FALSE)
  cptac_csv_1(dat_dir)
  cptac_expt_1(dat_dir)
  cptac_frac_1(dat_dir)
  
	
  ## Maxquant
  #  to install package `proteoQDB` containing MaxQuant examples: 
  #  (1) clone https://github.com/qiangzhang503/proteoQDB.git through `Github Desktop`
  #  (2) local installation of proteoQDB, e.g., devtools::install("~\\\\my_dir\\\\proteoQDB")
  library(proteoQDB)
  dat_dir <- c("C:\\\\The\\\\MQ\\\\Example")
  dir.create(dat_dir, recursive = TRUE, showWarnings = FALSE)
  cptac_mqpsm_txt(dat_dir)
  cptac_mqpsm_expt(dat_dir)
  cptac_mqpsm_frac(dat_dir)	
}
## END of RUN `Mascot or Maxquant but not both`


# ===================================
# Prerequisite PSM normalization
# ===================================
library(proteoQ)

## RUN `Mascot or Maxquant but not both`
dontrun <- TRUE
if (!dontrun) {
  ## Mascot
  dat_dir <- "C:\\\\The\\\\Mascot\\\\Example"
  
	
  ## Maxquant
  dat_dir <- c("C:\\\\The\\\\MQ\\\\Example")
}
## END of RUN `Mascot or Maxquant but not both`

dir.create(dat_dir, recursive = TRUE, showWarnings = FALSE)

load_expts()

normPSM(
  group_psm_by = pep_seq_mod, 
  fasta = c("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_hs_2013_07.fasta", 
            "~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_mm_2013_07.fasta"), 
)


# ===================================
# Prerequisite peptide normalization
# ===================================
normPep(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 749662, 
)


# ===================================
# Peptide cleanup by CV
# ===================================
# by percent CV
purgePep(pt_cv = .95)

# by max CV
purgePep(max_cv = .5)

# by `max_cv` then by `pt_cv`
purgePep(max_cv = .5)
purgePep(pt_cv = .95)

# actually 90\% CV 
purgePep(pt_cv = .95)
purgePep(pt_cv = .95)
}
\seealso{
\code{\link{purgePSM}} for PSM data purging.
}
