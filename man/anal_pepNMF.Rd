% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proteoQ-nmf.R
\name{anal_pepNMF}
\alias{anal_pepNMF}
\alias{anal_prnNMF}
\title{NMF Classification}
\usage{
anal_pepNMF(col_select = NULL, col_group = NULL, scale_log2r = TRUE,
  complete_cases = FALSE, impute_na = TRUE, df = NULL,
  filepath = NULL, filename = NULL, r = NULL, nrun = if (length(r)
  > 1) 50 else 1, seed = NULL, ...)

anal_prnNMF(col_select = NULL, col_group = NULL, scale_log2r = TRUE,
  complete_cases = FALSE, impute_na = TRUE, df = NULL,
  filepath = NULL, filename = NULL, r = NULL, nrun = if (length(r)
  > 1) 50 else 1, seed = NULL, ...)
}
\arguments{
\item{col_select}{Character string to a column key in \code{expt_smry.xlsx}.
At the \code{NULL} default, the column key of \code{Select} in
\code{expt_smry.xlsx} will be used. In the case of no samples being
specified under \code{Select}, the column key of \code{Sample_ID} will be
used. The non-empty entries under the ascribing column will be used in
indicated analysis.}

\item{col_group}{Character string to a column key in \code{expt_smry.xlsx}.
Samples corresponding to non-empty entries under \code{col_group} will be
used for sample grouping in the indicated analysis. At the NULL default, the
column key \code{Group} will be used. No data annotation by groups will be
performed if the fields under the indicated group column is empty.}

\item{scale_log2r}{Logical; if TRUE, adjusts \code{log2FC} to the same scale
of standard deviation across all samples. The default is TRUE.}

\item{complete_cases}{Logical; if TRUE, only cases that are complete with no
missing values will be used. The default is FALSE.}

\item{impute_na}{Logical; if TRUE, data with the imputation of missing values
will be used. The default is TRUE.}

\item{df}{The name of input data file. By default, it will be determined
automatically after matching the data type with an \code{id} among 
\code{c("pep_seq", "pep_seq_mod", "prot_acc", "gene")}.}

\item{filepath}{Use system default.}

\item{filename}{A representative file name to outputs. By default, it will be
determined automatically by the name of the current call.}

\item{r}{Numeric vector; the factorization rank(s) in \code{\link[NMF]{nmf}}.
The default is c(4:8)}

\item{nrun}{Numeric; the number of runs in \code{\link[NMF]{nmf}}. The default
is 50.}

\item{seed}{Integer; a seed setting a starting point for reproducible
analyses.}

\item{...}{\code{filter_}: Variable argument statements for the row filtration
of data against the column keys in \code{Peptide.txt}, \code{Protein.txt}
etc.; also see \code{\link{normPSM}}. \cr \cr No passing of extra arguments
to \code{NMF::nmf}.}
}
\value{
NMF classification of \code{log2FC} data.
}
\description{
\code{anal_pepNMF} performs the NMF classification of peptide \code{log2FC}.
The function is a wrapper of \code{\link[NMF]{nmf}}.

\code{anal_prnNMF} performs the NMF classification of protein \code{log2FC}.
The function is a wrapper of \code{\link[NMF]{nmf}}.
}
\details{
The option of \code{complete_cases} will be forced to \code{TRUE} at
\code{impute_na = FALSE}.
}
\examples{
# ===================================
# NMF
# ===================================

## !!!require the brief working example in `?load_expts`

## global option
scale_log2r <- TRUE

library(NMF)

# ===================================
# Analysis
# ===================================
## base (proteins)
library(NMF)

anal_prnNMF(
  impute_na = FALSE,
  col_group = Group,
  r = c(3:4),
  nrun = 20, 
)

## row filtration and selected samples (proteins)
anal_prnNMF(
  impute_na = FALSE,
  col_select = BI,
  col_group = Group,
  r = c(3:4),
  nrun = 20, 
  filter_prots = exprs(prot_n_pep >= 3),
  filename = bi_npep3.txt,
)

## additional row filtration by pVals (proteins, impute_na = FALSE)
# if not yet, run prerequisitive significance tests at `impute_na = FALSE`
pepSig(
  impute_na = FALSE, 
  W2_bat = ~ Term["(W2.BI.TMT2-W2.BI.TMT1)", 
                  "(W2.JHU.TMT2-W2.JHU.TMT1)", 
                  "(W2.PNNL.TMT2-W2.PNNL.TMT1)"],
  W2_loc = ~ Term_2["W2.BI-W2.JHU", 
                    "W2.BI-W2.PNNL", 
                    "W2.JHU-W2.PNNL"],
  W16_vs_W2 = ~ Term_3["W16-W2"], 
)

prnSig(impute_na = FALSE)

# (`W16_vs_W2.pVal (W16-W2)` now a column key)
anal_prnNMF(
  impute_na = FALSE,
  col_group = Group,
  r = c(3:4),
  nrun = 20, 
  filter_prots_by_npep = exprs(prot_n_pep >= 3), 
  filter_prots_by_pval = exprs(`W16_vs_W2.pVal (W16-W2)` <= 1e-6), 
  filename = pval.txt,
)

## additional row filtration by pVals (impute_na = TRUE)
# if not yet, run prerequisitive NA imputation and corresponding 
# significance tests at `impute_na = TRUE`
pepImp(m = 2, maxit = 2)
prnImp(m = 5, maxit = 5)

pepSig(
  impute_na = TRUE, 
  W2_bat = ~ Term["(W2.BI.TMT2-W2.BI.TMT1)", 
                  "(W2.JHU.TMT2-W2.JHU.TMT1)", 
                  "(W2.PNNL.TMT2-W2.PNNL.TMT1)"],
  W2_loc = ~ Term_2["W2.BI-W2.JHU", 
                    "W2.BI-W2.PNNL", 
                    "W2.JHU-W2.PNNL"],
  W16_vs_W2 = ~ Term_3["W16-W2"], 
)

prnSig(impute_na = TRUE)

anal_prnNMF(
  impute_na = TRUE,
  col_group = Group,
  r = c(3:4),
  nrun = 20, 
  filter_prots_by_npep = exprs(prot_n_pep >= 3), 
  filter_prots_by_pval = exprs(`W16_vs_W2.pVal (W16-W2)` <= 1e-6), 
  filename = pval2.txt,
)

## analogous peptides
anal_pepNMF(
  impute_na = TRUE,
  col_group = Group,
  r = c(3:4),
  nrun = 20, 
  filter_prots_by_npep = exprs(prot_n_pep >= 3), 
  filter_prots_by_pval = exprs(`W16_vs_W2.pVal (W16-W2)` <= 1e-6), 
)

anal_pepNMF(
  impute_na = FALSE,
  col_group = Group,
  r = c(3:4),
  nrun = 20, 
  filter_prots_by_npep = exprs(prot_n_pep >= 3), 
  filter_prots_by_pval = exprs(`W16_vs_W2.pVal (W16-W2)` <= 1e-6), 
)


# ===================================
# consensus heat maps
# ===================================
## no NA imputation 
# proteins, all available ranks
library(NMF)

plot_prnNMFCon(
  impute_na = FALSE,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  width = 12,
  height = 12,
)

# analogous peptides
plot_pepNMFCon(
  impute_na = FALSE,
  col_select = BI,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  color = colorRampPalette(brewer.pal(n = 7, name = "Spectral"))(50), 
  width = 10,
  height = 10,
  filename = bi.pdf,
)

## NA imputation 
# proteins, all available ranks
plot_prnNMFCon(
  impute_na = TRUE,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  width = 10,
  height = 10,
)

# analogous peptides
plot_pepNMFCon(
  impute_na = TRUE,
  col_select = BI,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  width = 10,
  height = 10,
  filename = bi_con.png,
)


# ===================================
# coefficient heat maps
# ===================================
## no NA imputation 
# proteins, all available ranks
plot_prnNMFCoef(
  impute_na = FALSE,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  width = 10,
  height = 10,
)

# analogous peptides
plot_pepNMFCoef(
  impute_na = FALSE,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  color = colorRampPalette(brewer.pal(n = 7, name = "Spectral"))(50), 
  width = 12,
  height = 12,
)

## NA imputation 
# proteins, all available ranks
plot_prnNMFCoef(
  impute_na = TRUE,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  width = 10,
  height = 10,
)

# analogous peptides
plot_pepNMFCoef(
  impute_na = TRUE,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  width = 10,
  height = 10,
)


# ===================================
# Metagene heat maps
# ===================================
## no NA imputation 
# proteins, all available ranks
plot_metaNMF(
  impute_na = FALSE,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  
  # additional arguments for `pheatmap`
  fontsize = 8,
  fontsize_col = 5,
)

# proteins, selected sample(s)
plot_metaNMF(
  impute_na = FALSE,
  col_select = BI_1,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  fontsize = 8,
  fontsize_col = 5,
  cellwidth = 6, 
  filename = bi1.png,
)

# proteins, selected sample(s) and row ordering
plot_metaNMF(
  impute_na = FALSE,
  col_select = BI_1,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  fontsize = 8,
  fontsize_col = 5,
  cellwidth = 6, 
  cluster_rows = FALSE,
  arrange_prots_by = exprs(gene),
  filename = bi1_row_by_genes.png,
)

## NA imputation 
# proteins, all available ranks
plot_metaNMF(
  impute_na = TRUE,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  fontsize = 8,
  fontsize_col = 5,
)

}
\seealso{
\code{\link{load_expts}} for a reduced working example in data
 normalization \cr

 \code{\link{normPSM}} for extended examples in PSM data normalization \cr
 \code{\link{PSM2Pep}} for extended examples in PSM to peptide summarization
 \cr \code{\link{mergePep}} for extended examples in peptide data merging \cr
 \code{\link{standPep}} for extended examples in peptide data normalization
 \cr \code{\link{Pep2Prn}} for extended examples in peptide to protein
 summarization \cr \code{\link{standPrn}} for extended examples in protein
 data normalization. \cr \code{\link{purgePSM}} and \code{\link{purgePep}}
 for extended examples in data purging \cr \code{\link{pepHist}} and
 \code{\link{prnHist}} for extended examples in histogram visualization. \cr
 \code{\link{extract_raws}} and \code{\link{extract_psm_raws}} for extracting
 MS file names \cr

 \code{\link{contain_str}}, \code{\link{contain_chars_in}},
 \code{\link{not_contain_str}}, \code{\link{not_contain_chars_in}},
 \code{\link{start_with_str}}, \code{\link{end_with_str}},
 \code{\link{start_with_chars_in}} and \code{\link{ends_with_chars_in}} for
 data subsetting by character strings \cr

 \code{\link{pepImp}} and \code{\link{prnImp}} for missing value imputation
 \cr \code{\link{pepSig}} and \code{\link{prnSig}} for significance tests \cr
 \code{\link{pepVol}} and \code{\link{prnVol}} for volcano plot visualization
 \cr

 \code{\link{prnGSPA}} for gene set enrichment analysis by protein
 significance pVals \cr \code{\link{gspaMap}} for mapping GSPA to volcano
 plot visualization \cr \code{\link{prnGSPAHM}} for heat map and network
 visualization of GSPA results \cr \code{\link{prnGSVA}} for gene set
 variance analysis \cr \code{\link{prnGSEA}} for data preparation for online
 GSEA. \cr

 \code{\link{pepMDS}} and \code{\link{prnMDS}} for MDS visualization \cr
 \code{\link{pepPCA}} and \code{\link{prnPcA}} for PCA visualization \cr
 \code{\link{pepHM}} and \code{\link{prnHM}} for heat map visualization \cr
 \code{\link{pepCorr_logFC}}, \code{\link{prnCorr_logFC}},
 \code{\link{pepCorr_logInt}} and \code{\link{prnCorr_logInt}}  for
 correlation plots \cr

 \code{\link{anal_prnTrend}} and \code{\link{plot_prnTrend}} for trend
 analysis and visualization \cr \code{\link{anal_pepNMF}},
 \code{\link{anal_prnNMF}}, \code{\link{plot_pepNMFCon}},
 \code{\link{plot_prnNMFCon}}, \code{\link{plot_pepNMFCoef}},
 \code{\link{plot_prnNMFCoef}} and \code{\link{plot_metaNMF}} for NMF
 analysis and visualization \cr

 \code{\link{dl_stringdbs}} and \code{\link{anal_prnString}} for STRING-DB
}
