% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/peptable.R
\name{standPep}
\alias{standPep}
\title{Standardize peptide results}
\usage{
standPep(
  method_align = c("MC", "MGKernel"),
  col_select = NULL,
  range_log2r = c(10, 90),
  range_int = c(5, 95),
  n_comp = NULL,
  seed = NULL,
  plot_log2FC_cv = FALSE,
  ...
)
}
\arguments{
\item{method_align}{Character string indicating the method in aligning
\code{log2FC} across samples. \code{MC}: median-centering; \code{MGKernel}:
the kernel density defined by multiple Gaussian functions
(\code{\link[mixtools]{normalmixEM}}). At the \code{MC} default, the ratio
profiles of each sample will be aligned in that the medians of the
\code{log2FC} are zero. At \code{MGKernel}, the ratio profiles of each
sample will be aligned in that the \code{log2FC} at the maximums of kernel
density are zero.}

\item{col_select}{Character string to a column key in \code{expt_smry.xlsx}.
At the \code{NULL} default, the column key of \code{Select} in
\code{expt_smry.xlsx} will be used. In the case of no samples being
specified under \code{Select}, the column key of \code{Sample_ID} will be
used. The non-empty entries under the ascribing column will be used in
indicated analysis.}

\item{range_log2r}{Numeric vector at length two. The argument specifies the
range of the \code{log2FC} for use in the scaling normalization of standard
deviation across samples. The default is between the 10th and the 90th
quantiles.}

\item{range_int}{Numeric vector at length two. The argument specifies the
range of the \code{intensity} of reporter ions (including \code{I000}) for
use in the scaling normalization of standard deviation across samples. The
default is between the 5th and the 95th quantiles.}

\item{n_comp}{Integer; the number of Gaussian components to be used with
\code{method_align = MGKernel}. A typical value is 2 or 3. The variable
\code{n_comp} overwrites the argument \code{k} in
\code{\link[mixtools]{normalmixEM}}.}

\item{seed}{Integer; a seed for reproducible fitting at \code{method_align =
MGKernel}.}

\item{plot_log2FC_cv}{Logical; if TRUE, the distributions of the CV of peptide
\code{log2FC} will be plotted. The default is TRUE.}

\item{...}{\code{slice_}: variable argument statements for the identification
of row subsets. The partial data will be taken for parameterizing the
alignment of \code{log2FC} across samples. The full data set will be updated
subsequently with the newly derived parameters. Note that there is no data
entry removals from the complete data set with the \code{slice_} procedure.
\cr \cr The variable argument statements should be in the following format:
each of the statement contains a list of logical expression(s). The
\code{lhs} needs to start with \code{slice_}. The logical condition(s) at
the \code{rhs} needs to be enclosed in \code{exprs} with round parenthesis.
For example, \code{pep_len} is a column key present in \code{Peptide.txt}.
The \code{slice_peps_at = exprs(pep_len >= 10, pep_len <= 50)} will extract
peptide entries with the number of amino acid residues betwen 10 and 50 for
\code{log2FC} alignment. Shorter or longer peptide sequences will remain in
\code{Peptide.txt} but not used in the parameterization. See also
\code{\link{normPSM}} for the variable arguments of \code{filter_}. \cr \cr
Additional parameters from \code{\link[mixtools]{normalmixEM}}, i.e., \cr
\code{maxit}, the maximum number of iterations allowed; \cr \code{epsilon},
tolerance limit for declaring algorithm convergence.}
}
\value{
The primary output is in \code{.../Peptide/Peptide.txt}.
}
\description{
\code{standPep} standardizes peptide results from \code{\link{mergePep}} with
additional, stand-alone choices in data alignment. The utility is typically
applied after the assembly of peptide data via \code{\link{mergePep}}. It
further supports iterative normalization against data under selected sample
columns, data rows or both.
}
\details{
In the primary output file, "\code{Peptide.txt}", values under columns
\code{log2_R...} are logarithmic ratios at base 2 in relative to the
\code{reference(s)} within each multiplex TMT set, or to the row means within
each plex if no \code{reference(s)} are present. Values under columns
\code{N_log2_R...} are aligned \code{log2_R...} according to
\code{method_align} without scaling normalization. Values under columns
\code{Z_log2_R...} are \code{N_log2_R...} with additional scaling
normalization. Values under columns \code{I...} are reporter-ion or LFQ
intensity before normalization. Values under columns \code{N_I...} are
normalized \code{I...}. Values under columns \code{sd_log2_R...} are the
standard deviation of the \code{log2FC} of proteins from ascribing peptides.

In general, median statistics is applied when summarizing numeric peptide data
from different LCMS series. One exception is \code{pep_expect} where geometric
mean is used.

Description of the column keys in the inputs and outputs: \cr
\code{system.file("extdata", "peptide_keys.txt", package = "proteoQ")}
}
\examples{
\donttest{
# ===================================
# Peptide normalization
# ===================================

## !!!require the brief working example in `?load_expts`

# ===================================
# (1) `MGKernel`
# ===================================

# !!! Initial `Peptide.txt` results from `mergePep()` are in median centering.
# !!! The first `MGKernel` normalization will always be applied to all samples.
# !!! If changing `n_comp`, succeeding `MGKernel` normalization(s) will be 
#     applied to all samples (a fresh-start principle, see also section 4)

# (1.1) the first `MGKernel` after `mergePep()`
# (default double trimming by log2FC and intensity percentiles also applied)
standPep(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 749662, 
  maxit = 200, 
  epsilon = 1e-05, 
)

# histograms for all data rows
# (for samplicity only plot against samples indicated under `expt_smry.xlsx::BI_1`)
pepHist(scale_log2r = TRUE, col_select = BI_1, filename = bi1.png)

# human subset
# (a little off in relative to all data rows)
pepHist(scale_log2r = TRUE, col_select = BI_1, filter_by = exprs(species == "human"), filename = bi1_human.png)

# mouse subset 
# (a lot off in relative to all data rows)
pepHist(scale_log2r = TRUE, col_select = BI_1, filter_by = exprs(species == "mouse"), filename = bi1_mouse.png)

# (1.2) additive step to (1.1): against `expt_smry.xlsx::W2` samples and based on their human subset
standPep(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 749662, 
  maxit = 200, 
  epsilon = 1e-05, 
  col_select = W2,  
  slice_peps_by = exprs(species == "human"),
)

# human subset 
# (W2 samples are now aligned)
pepHist(scale_log2r = TRUE, col_select = BI_1, filter_by = exprs(species == "human"), filename = bi1_human_slicehuw2.png)

# (1.3) additive to (1.2): against `expt_smry.xlsx::W16` samples and based on their human subset
standPep(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 749662, 
  maxit = 200, 
  epsilon = 1e-05, 
  col_select = W16,  
  slice_peps_by = exprs(species == "human"),
)

# human subset 
# (W16 samples are now also aligned)
pepHist(scale_log2r = TRUE, col_select = BI_1, filter_by = exprs(species == "human"), filename = bi1_human_slicehuw16.png)

# a side effect: to recapitulate the misalignment between human data and human + mouse data
# (this is because density curves are based on the latest `standPep` at `method_align = MGKernel`)
pepHist(scale_log2r = TRUE, col_select = BI_1, filename = bi1_recap.png)


# ===================================
# (2) Mixed-bed
# ===================================
# start over
unlink(file.path(dat_dir, "Peptide"), recursive = TRUE, force = TRUE)
PSM2Pep()
mergePep()

# data in initial `Peptide.txt` from `mergePep()` are aligned by MC
pepHist(scale_log2r = TRUE, col_select = BI_1, filename = mc.png)

# (2.1) the first `MGKernel` alignment against all samples using all data rows
standPep(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 883, 
  maxit = 200, 
  epsilon = 1e-05, 
)

pepHist(scale_log2r = TRUE, col_select = BI_1, filename = mG.png)

# (2.2) followed by MC against selected samples using all data rows
# (arguments `n_comp`, `seed`, `maxit`, `epsilon` have no effects at `method_align = MC`)
standPep(
  method_align = MC,
  
  n_comp = 3,
  seed = 883,
  maxit = 200,
  epsilon = 1e-05,
  
  col_select = Select_sub, 
)

# the net result is mixed-bed alignment of MGKernel and MC
# (with samples indicated by `Select_sub` aligned by MC and the remaining by MGKernel)
pepHist(scale_log2r = TRUE, col_select = BI_1, filename = mix.png)


# ===================================
# (3) Mixed-bed against data subset
# ===================================
# start over
unlink(file.path(dat_dir, "Peptide"), recursive = TRUE, force = TRUE)
PSM2Pep()
mergePep()

pepHist(scale_log2r = TRUE, col_select = BI_1, filename = mc.png)

# (3.1) MC alignment for all samples, but only selected data rows used for normalization
standPep(
  method_align = MC, 
  slice_peps_by = exprs(prot_n_psm >= 10),
)

pepHist(scale_log2r = TRUE, col_select = BI_1, filename = mc_selrows.png)

# (3.2) the first `MGKernel` for all samples using selected data rows
standPep(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 400, 
  maxit = 200, 
  epsilon = 1e-05,
  
  # will be forced to all samples since this is the first `MGKernel`
  # col_select = Select_sub, 

  slice_peps_by = exprs(prot_n_psm >= 10),
)

pepHist(scale_log2r = TRUE, col_select = BI_1, filename = mG_selrows.png)

# (3.3) back to MC for selected samples using selected data rows
# (mixed-bed again, but based on data subset by `prot_n_psm >= 10`)
standPep(
  method_align = MC, 
  col_select = Select_sub, 
  slice_peps_by = exprs(prot_n_psm >= 10),
)

# A side effect in comparing `MC` and `MGKernel`
# (density curves are from the preceding `MGKernel` in (3.2))
pepHist(scale_log2r = TRUE, col_select = BI_1, filename = mix_selcols_selrows.png)


# ===================================
# (4) Modified `n_comp`
# ===================================
# start over
unlink(file.path(dat_dir, "Peptide"), recursive = TRUE, force = TRUE)
PSM2Pep()
mergePep()

pepHist(scale_log2r = TRUE, col_select = BI_1, filename = mc.png)

# (4.1) first `MGKernel` at `n_comp = 3` for all samples
standPep(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 400, 
  maxit = 200, 
  epsilon = 1e-05, 
)

pepHist(scale_log2r = TRUE, col_select = BI_1, filename = mG3.png)

# (4.2) a fresh start since changing `n_comp`
# (e.g. `col_select = Select_sub` ignored; instead apply `MGKernel` to all samples)
standPep(
  method_align = MGKernel, 
  n_comp = 2, 
  seed = 400, 
  maxit = 200, 
  epsilon = 1e-05,
  
  # ignored
  col_select = Select_sub, 
)

pepHist(scale_log2r = TRUE, col_select = BI_1, filename = mG2.png)


# ===================================
# (5) housekeeping normalizers: 
#     suggest `method_align = MC`
# ===================================
# start over
unlink(file.path(dat_dir, "Peptide"), recursive = TRUE, force = TRUE)
PSM2Pep()
mergePep()

# initial `Peptide.txt` from `mergePep()` is aligned by MC
pepHist(scale_log2r = TRUE, col_select = BI_1, filename = mc.png)

# (GAPDH more abundant in W16 according to MC alignment)
pepHist(scale_log2r = TRUE, col_select = BI_1, filter_ = exprs(gene == "GAPDH"), filename = mcGAPDH.png)

# heat map for `BI_1` samples
# (outputs under `Peptide/Heatmap` folder; for help, ?pepHM)
pepHM(
  col_select = BI_1, 
  xmin = -2,
  xmax = 2,
  xmargin = 0.1,
  annot_cols = c("Group", "Color", "Alpha", "Shape"),
  annot_colnames = c("Group", "Lab", "Batch", "WHIM"),
  cluster_rows = TRUE,
  annot_rows = c("gene"),
  show_rownames = TRUE,
  show_colnames = TRUE,
  fontsize_row = 10,
  cellwidth = 12,
  cellheight = 12,
  width = 18,
  height = 12,
  
  filter_by = exprs(gene \%in\% c("GAPDH")),
  filename = "mcGAPDH.png",
)

# heat map for all samples
# (no GAPDH under `JHU_TMT1` and `PNNL_TMT1`; will be problematic in data alignment next)
pepHM(
  # col_select = BI_1, 
  xmin = -2,
  xmax = 2,
  xmargin = 0.1,
  annot_cols = c("Group", "Color", "Alpha", "Shape"),
  annot_colnames = c("Group", "Lab", "Batch", "WHIM"),
  cluster_rows = TRUE,
  annot_rows = c("gene"),
  show_rownames = TRUE,
  show_colnames = TRUE,
  fontsize_row = 10,
  cellwidth = 12,
  cellheight = 12,
  width = 18,
  height = 12,
  
  filter_by = exprs(gene \%in\% c("GAPDH")),
  filename = "mcGAPDH_all.png",
)

# first renormalize against GAPDH for all samples
# (not to use `MGkernel` as may not have enough data entries from housekeeper(s))
standPep(
  method_align = MC, 
  slice_hskp = exprs(gene \%in\% c("GAPDH")),
)

# (now log2FC profiles aligned by GAPDH for `BI_1` samples)
pepHist(scale_log2r = TRUE, col_select = BI_1, filename = wrong_hskp.png)

# (no histograms for `JHU_TMT1` and `PNNL_TMT1` samples as no GAPDH underneath)
pepHist(scale_log2r = TRUE, filename = wrong_hskp_all.png)

# not to keep the above example with no data under `JHU_TMT1` and `PNNL_TMT1`
# (surely need different normalizer(s))
unlink(file.path(dat_dir, "Peptide"), recursive = TRUE, force = TRUE)


## Not run: 
PSM2Pep()
mergePep()

# change to `MGKernel`
standPep(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 400, 
  maxit = 200, 
  epsilon = 1e-05, 
)

pepHist(scale_log2r = TRUE, col_select = BI_1, filename = mG.png)

# then renormalize against data from GAPDH
# (error: too few entries for fitting with multiple Gaussians)
standPep(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 400, 
  maxit = 200, 
  epsilon = 1e-05, 
  
  col_select = W2, 
  slice_hskp = exprs(gene \%in\% c("GAPDH")),
)
## End(Not run)
}

}
\seealso{
\emph{Metadata} \cr \code{\link{load_expts}} for metadata preparation
and a reduced working example in data normalization \cr

\emph{Data normalization} \cr \code{\link{normPSM}} for extended examples in
PSM data normalization \cr \code{\link{PSM2Pep}} for extended examples in PSM
to peptide summarization \cr \code{\link{mergePep}} for extended examples in
peptide data merging \cr \code{\link{standPep}} for extended examples in
peptide data normalization \cr \code{\link{Pep2Prn}} for extended examples in
peptide to protein summarization \cr \code{\link{standPrn}} for extended
examples in protein data normalization. \cr \code{\link{purgePSM}} and
\code{\link{purgePep}} for extended examples in data purging \cr
\code{\link{pepHist}} and \code{\link{prnHist}} for extended examples in
histogram visualization. \cr \code{\link{extract_raws}} and
\code{\link{extract_psm_raws}} for extracting MS file names \cr

\emph{Variable arguments of `filter_...`} \cr \code{\link{contain_str}},
\code{\link{contain_chars_in}}, \code{\link{not_contain_str}},
\code{\link{not_contain_chars_in}}, \code{\link{start_with_str}},
\code{\link{end_with_str}}, \code{\link{start_with_chars_in}} and
\code{\link{ends_with_chars_in}} for data subsetting by character strings \cr

\emph{Missing values} \cr \code{\link{pepImp}} and \code{\link{prnImp}} for
missing value imputation \cr

\emph{Informatics} \cr \code{\link{pepSig}} and \code{\link{prnSig}} for
significance tests \cr \code{\link{pepVol}} and \code{\link{prnVol}} for
volcano plot visualization \cr \code{\link{prnGSPA}} for gene set enrichment
analysis by protein significance pVals \cr \code{\link{gspaMap}} for mapping
GSPA to volcano plot visualization \cr \code{\link{prnGSPAHM}} for heat map
and network visualization of GSPA results \cr \code{\link{prnGSVA}} for gene
set variance analysis \cr \code{\link{prnGSEA}} for data preparation for
online GSEA. \cr \code{\link{pepMDS}} and \code{\link{prnMDS}} for MDS
visualization \cr \code{\link{pepPCA}} and \code{\link{prnPCA}} for PCA
visualization \cr \code{\link{pepLDA}} and \code{\link{prnLDA}} for LDA
visualization \cr \code{\link{pepHM}} and \code{\link{prnHM}} for heat map
visualization \cr \code{\link{pepCorr_logFC}}, \code{\link{prnCorr_logFC}},
\code{\link{pepCorr_logInt}} and \code{\link{prnCorr_logInt}}  for correlation
plots \cr \code{\link{anal_prnTrend}} and \code{\link{plot_prnTrend}} for
trend analysis and visualization \cr \code{\link{anal_pepNMF}},
\code{\link{anal_prnNMF}}, \code{\link{plot_pepNMFCon}},
\code{\link{plot_prnNMFCon}}, \code{\link{plot_pepNMFCoef}},
\code{\link{plot_prnNMFCoef}} and \code{\link{plot_metaNMF}} for NMF analysis
and visualization \cr

\emph{Custom databases} \cr \code{\link{Uni2Entrez}} for lookups between
UniProt accessions and Entrez IDs \cr \code{\link{Ref2Entrez}} for lookups
among RefSeq accessions, gene names and Entrez IDs \cr \code{\link{prepGO}}
for
\code{\href{http://current.geneontology.org/products/pages/downloads.html}{gene
ontology}} \cr \code{\link{prepMSig}} for
\href{https://data.broadinstitute.org/gsea-msigdb/msigdb/release/7.0/}{molecular
signatures} \cr \code{\link{prepString}} and \code{\link{anal_prnString}} for
STRING-DB \cr

\emph{Column keys in PSM, peptide and protein outputs} \cr 
system.file("extdata", "psm_keys.txt", package = "proteoQ") \cr
system.file("extdata", "peptide_keys.txt", package = "proteoQ") \cr
system.file("extdata", "protein_keys.txt", package = "proteoQ") \cr
}
