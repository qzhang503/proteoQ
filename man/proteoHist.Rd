% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proteoQ-histo.R
\name{proteoHist}
\alias{proteoHist}
\alias{pepHist}
\alias{prnHist}
\title{Histogram visualization}
\usage{
proteoHist(id = c("pep_seq", "pep_seq_mod", "prot_acc", "gene"),
  col_select = NULL, scale_log2r = FALSE, pep_pattern = "zzz",
  show_curves = TRUE, show_vline = TRUE, scale_y = TRUE, df = NULL,
  filepath = NULL, filename = NULL, ...)

pepHist(...)

prnHist(...)
}
\arguments{
\item{id}{Character string to indicate the type of data. The value will be
determined automatically. Peptide data will be used at \code{id = pep_seq}
or \code{pep_seq_mod}, and protein data will be used at \code{id = prot_acc}
or \code{gene}.}

\item{col_select}{Character string to a column key in \code{expt_smry.xlsx}.
Samples corresponding to non-empty entries under the column key will be
included in the indicated analysis. At the \code{NULL} default, the column
key will be \code{Select}.}

\item{scale_log2r}{Logical; if TRUE, adjusts \code{log2FC} to the same scale
of standard deviation across all samples.}

\item{pep_pattern}{Softely depreciated. Character string containing one-letter
representation of amino acids. At the "zzz" default, all peptides will be
used. Letters in the character string are case sensitive. For example,
\code{pep_pattern = "y"} will extract peptides with tyrosine
phosphorylation. To extract peptides with N-terminal acetylation, use
\code{pep_pattern = "_"}. The parameter provides a means for high-level
subsetting of peptide entries in a data set. In general, one can use the
\code{filter-in-function} feature described in \code{\link{normPSM}} to
subset data.}

\item{show_curves}{Logical; if TRUE, shows the fitted curves. The curve
parameters are based on the latest call to \code{normPep} or \code{normPrn}.
This feature can inform the effects of data filtration on the alignment of
\code{logFC} profiles.}

\item{show_vline}{Logical; if TRUE, shows the vertical lines at \code{x = 0}.}

\item{scale_y}{Logical; if TRUE, scale data on the \code{y-axis}.}

\item{df}{The name of input data file. By default, it will be determined
automatically by the value of \code{id}.}

\item{filepath}{A file path to output results. By default, it will be
determined automatically by the name of the calling function and the value
of \code{id} in the \code{call}.}

\item{filename}{A representative file name to output image(s). By default, it
will be determined automatically by the name of the current \code{call}. The
image(s) are saved via \code{\link[ggplot2]{ggsave}} where the image type
will be determined by the extension of the file name. A \code{.png} format
will be used at default or at an unrecognized file extension.}

\item{...}{\code{filter_}: Logical expression(s) for the row filtration of
data; also see \code{\link{normPSM}}. \cr Additional parameters for plotting
with \code{ggplot2}: \cr \code{xmin}, the minimum \eqn{x} at a log2 scale;
the default is -2. \cr \code{xmax}, the maximum \eqn{x} at a log2 scale; the
default is +2. \cr \code{xbreaks}, the breaks in \eqn{x}-axis at a log2
scale; the default is 1. \cr \code{binwidth}, the binwidth of \code{log2FC};
the default is \eqn{(xmax - xmin)/80}. \cr \code{ncol}, the number of
columns; the default is 1. \cr \code{width}, the width of plot; \cr
\code{height}, the height of plot. \cr \code{scales}, should the scales be
fixed across panels; the default is "fixed" and the alternative is "free".}
}
\value{
The histograms of \code{log2FC} under
 \code{~\\dat_dir\\Peptide\\Histogram} or
 \code{~\\dat_dir\\Protein\\Histogram}.
}
\description{
\code{proteoHist} plots the histograms of protein or peptide \code{log2FC}.
Users should avoid call the method directly, but instead use the following
wrappers.

\code{pepHist} is a wrapper of \code{\link{proteoHist}} for peptide data

\code{prnHist} is a wrapper of \code{\link{proteoHist}} for protein data
}
\details{
In the histograms, the \code{log2FC} under each TMT channel are color-coded by
their contributing reporter-ion intensity.

The function matches the current \code{id} to the grouping argument in
\code{\link{normPSM}}. The value by \code{group_psm_by} or \code{group_pep_by}
will be matched for peptide or protein data, respectively. For example, if
\code{normPSM(group_psm_by = pep_seq, ...)} was called earlier, the setting of
\code{id = pep_seq_mod} in the current \code{call} will be matched to \code{id
= pep_seq}. Similarly, if \code{normPSM(group_pep_by = gene, ...)} was
earlierly applied, the setting of \code{id = prot_acc} in the current
\code{call} will be matched to \code{id = gene}.
}
\examples{
## visualization of normalization
# without scaling
pepHist(scale_log2r = FALSE)

# with scaling
pepHist(scale_log2r = TRUE)

## samples for use are indicated under a column, i.e. `Select`, in `expt_smry.xlsx`
# peptides
pepHist(col_select = Select)

# proteins
prnHist(col_select = Select)

## row filtration of data
# phosphopeptide subset
pepHist(
  scale_log2r = TRUE,
  filter_peps = exprs(contain_chars_in("sty", pep_seq_mod)), 
  scale_y = FALSE, 
  filename = "pepHist_fil_by_sty.png",
)

# or use `grepl` directly
pepHist(
  filter_by = exprs(grepl("[sty]", pep_seq_mod)),
  filename = "pepHist_fil_by_sty.png",
)

# exclude oxidized methione or deamidated asparagine
pepHist(
  # filter_by = exprs(!grepl("[mn]", pep_seq_mod)),
  filter_by = exprs(not_contain_chars_in("mn", pep_seq_mod)),
  filename = "pepHist_fil_no_mn.png",
)

## between lead and lag
# leading logFC profiles of peptides
pepHist(
  filename = "pepHist.png",
)

# lagging logFC profiles of peptides at
#   (1) n_psm >= 10
#   (2) and no methionine oxidation or asparagine deamidation
# 
# may be used for the identification of sample(s) with 
#   considerable offset(s) between the lead and the lag
pepHist(
  filter_by_npsm = exprs(n_psm >= 10),
  filter_by_mn = exprs(not_contain_chars_in("mn", pep_seq_mod)),
  filename = "pepHist_filtered.png",
)

\dontrun{
# sample selection
pepHist(
  col_select = "a_column_key_not_in_`expt_smry.xlsx`",
)

# data filtration
pepHist(
  filter_by = exprs(!grepl("[m]", a_column_key_not_in_data_table)),
)

prnHist(
  lhs_not_start_with_filter_ = exprs(n_psm >= 5),
)

}

}
