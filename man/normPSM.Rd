% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proteoQ-psmtable.R
\name{normPSM}
\alias{normPSM}
\title{Reports PSM results}
\usage{
normPSM(group_psm_by = c("pep_seq", "pep_seq_mod"),
  group_pep_by = c("prot_acc", "gene"), dat_dir = NULL,
  expt_smry = "expt_smry.xlsx", frac_smry = "frac_smry.xlsx",
  fasta = NULL, pep_unique_by = "group", corrected_int = FALSE,
  rm_reverses = TRUE, rptr_intco = 1000, rm_craps = FALSE,
  rm_krts = FALSE, rm_outliers = FALSE, annot_kinases = FALSE,
  plot_rptr_int = TRUE, plot_log2FC_cv = TRUE,
  use_lowercase_aa = TRUE, ...)
}
\arguments{
\item{group_psm_by}{A character string for the grouping of PSM entries. At the
\code{pep_seq} default, descriptive statistics will be calculated based on
the same \code{pep_seq} groups. At \code{group_psm_by = pep_seq_mod},
peptides with different variable modifications will be treated as different
species. The early decision in data grouping will inform the downstream
purging (\code{\link{purgePSM}}) and summarization (\code{\link{normPep}})
of PSM data.}

\item{group_pep_by}{A character string for the grouping of peptide entries. At
the \code{prot_acc} default, descriptive statistics will be calculated based
on the same \code{prot_acc} groups. At \code{group_pep_by = gene}, proteins
with the same gene name but different accession numbers will be treated as
one group.}

\item{dat_dir}{A character string to the working directory.}

\item{expt_smry}{A character string to the \code{.xlsx} file containing the
metadata of TMT experiments. The default is "expt_smry.xlsx".}

\item{frac_smry}{A character string to the \code{.xlsx} file containing
peptide fractionation summary. The default is "frac_smry.xlsx".}

\item{fasta}{Character string(s) to the name(s) of fasta file(s) with
prepended directory path. The \code{fasta} database(s) need to match those
used in MS/MS ion search.}

\item{pep_unique_by}{A character string for the characterization of peptide
uniqueness from \code{MaxQuant} PSMs. The choice is in \code{c("group",
"protein")}. At the \code{group} default, the uniqueness of peptides is by
protein groups. At a more strigent criterion of \code{protein}, the
uniqueness of peptides is by protein entries. A new column of
\code{pep_isunique} will be added accordingly to the PSM reports. An earlier
trivial option of \code{none} is depreciated.}

\item{corrected_int}{Logical. If TRUE, values under columns "Reporter
intensity corrected" in MaxQuant PSM results (\code{msms.txt}) will be used.
Otherwise, "Reporter intensity" values without corrections will be used.}

\item{rm_reverses}{Logical; if TRUE, removes \code{Reverse} entries from
MaxQuant peptide results.}

\item{rptr_intco}{Numeric; the threshold of reporter ion intensity.}

\item{rm_craps}{Logical; if TRUE, removes
\code{\href{https://www.thegpm.org/crap/}{cRAP}} proteins.}

\item{rm_krts}{Logical; if TRUE, removes keratin entries.}

\item{rm_outliers}{Logical; if TRUE, performs outlier removals.}

\item{annot_kinases}{Logical; if TRUE, annotates kinase attributes of
proteins.}

\item{plot_rptr_int}{Logical; if TRUE, prepares the violin plots of
reporter-ion intensities.}

\item{plot_log2FC_cv}{Logical; if TRUE, prepares the violin plots of the CV of
peptide \code{log2FC} for each sample.}

\item{use_lowercase_aa}{Logical; if TRUE, use lower-case and/or \code{^_~}
one-letter representation to abbreviate the modifications of amino acid
residues. See the table below for details.}

\item{...}{\code{filter_}: Each argument corresponds to a logical
expression(s) for the filtration of data rows. The \code{lhs} needs to start
with \code{filter_}. The logical condition(s) at the \code{rhs} needs to be
enclosed in \code{exprs} with round parenthesis.}
}
\value{
Outputs are under the directory of \code{PSM} sub to \code{dat_dir}.
 Primary results are in \code{TMTset1_LCMSinj1_PSM_N.txt,
 TMTset2_LCMSinj1_PSM_N.txt, ...} The indeces of TMT experiment and LC/MS
 injection are indicated in the file names.
}
\description{
\code{normPSM} reports
\code{\href{https://www.ebi.ac.uk/pride/help/archive/search/tables}{PSM}}
results from \code{\href{https://en.wikipedia.org/wiki/Tandem_mass_tag}{TMT}}
experiments.
}
\details{
In each primary output file, "\code{...PSM_N.txt}", values under columns
\code{log2_R...} are logarithmic ratios at base 2 in relative to the
\code{reference(s)} within each multiplex TMT set, or to the row means if no
\code{reference(s)} are present. Values under columns \code{N_log2_R...} are
\code{log2_R...} with median-centering alignment. Values under columns
\code{I...} are raw \code{reporter-ion intensity} from database searches.
Values under columns \code{N_I...} are normalized \code{reporter-ion
intensity}. Values under columns \code{sd_log2_R...} are the standard
deviation of the \code{log2FC} of peptides from ascribing PSMs. Character
strings under \code{pep_seq_mod} denote peptide sequences with applicable
variable modifications.

\cr\strong{Nomenclature of \code{pep_seq_mod}} (\code{use_lowercase_aa =
TRUE)}:

\tabular{ll}{ \emph{Variable modification}   \tab \emph{Abbreviation}\cr
Non-terminal \tab A letter from upper to lower case and the flanking residues
on the N- or C-terminal side of the peptide separated by a dot, e.g.,
\code{-.mtFPEADILLK.S} \cr N-term \tab A hat to the left of a peptide
sequence, e.g., \code{K.^QDGTHVVEAVDATHIGK.L} \cr C-term \tab A hat to the
right of a peptide sequence, e.g., \code{K.DAYYNLCLPQRPnMI^.-} \cr Acetyl
(Protein N-term) \tab A underscore to the left of a peptide sequence, e.g.,
\code{-._mAsGVAVSDGVIK.V}. \cr Amidated (Protein C-term) \tab A underscore to
the right of a peptide sequence, e.g., \code{K.DAYYNLCLPQRPnMI_.-}. \cr Other
(Protein N-term) \tab A tilde to the left of a peptide sequence, e.g.,
\code{-.~mAsGVAVSDGVIK.V} \cr Other (Protein C-term) \tab An tilde to the
right of a peptide sequence, e.g. \code{K.DAYYNLCLPQRPnMI~.-} \cr }
}
\section{\code{Mascot}}{
 End users will export \code{PSM} data from
 \code{\href{https://http://www.matrixscience.com/}{Mascot}} at a \code{.csv}
 format and store them under the file folder indicated by \code{dat_dir}. The
 header information should be included during the \code{.csv} export. The
 file name(s) should be defaulted by
 \code{\href{https://http://www.matrixscience.com/}{Mascot}}: starting with
 the letter \code{'F'}, followed by a six-digit number without space and
 ended with a \code{'.csv'} extension \code{(e.g., F004453.csv)}.

 See \code{\link{normPrn}} for the description of column keys in the output.
}

\section{\code{MaxQuant}}{
 End users will copy over \code{msms.txt} file(s)
 from \code{\href{https://www.maxquant.org/}{MaxQuant}} to the \code{dat_dir}
 directory. In the case of multiple \code{msms.txt} files for processing, the
 file names need to be compiled in that they all start with \code{'msms'} and
 end with a \code{'.txt'} extension.
}

\section{\code{Spectrum Mill}}{
 End users will copy over \code{PSMexport.1.ssv}
 file(s) from
 \code{\href{https://www.agilent.com/en/products/software-informatics/masshunter-suite/masshunter-for-life-science-research/spectrum-mill}{Spectrum
  Mill}} to the \code{dat_dir} directory. In the case of multiple
 \code{PSMexport} files for processing, the file names need to be compiled in
 that they all start with \code{'PSMexport'} and end with a \code{'.ssv'}
 extension.
}

\examples{
# ===================================
# Prerequisite Fasta and PSM files
# ===================================
library(proteoQDA)
fasta_dir <- "~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq"
dir.create(fasta_dir, recursive = TRUE, showWarnings = FALSE)
copy_refseq_hs(fasta_dir)
copy_refseq_mm(fasta_dir)

## RUN `Mascot or Maxquant but not both`
dontrun <- TRUE
if (!dontrun) {
  ## Mascot
  dat_dir <- "C:\\\\The\\\\Mascot\\\\Example"
  dir.create(dat_dir, recursive = TRUE, showWarnings = FALSE)
  cptac_csv_1(dat_dir)
  cptac_expt_1(dat_dir)
  cptac_frac_1(dat_dir)
  
	
  ## Maxquant
  #  to install package `proteoQDB` containing MaxQuant examples: 
  #  (1) clone https://github.com/qiangzhang503/proteoQDB.git through `Github Desktop`
  #  (2) local installation of proteoQDB, e.g., devtools::install("~\\\\my_dir\\\\proteoQDB")
  library(proteoQDB)
  dat_dir <- c("C:\\\\The\\\\MQ\\\\Example")
  dir.create(dat_dir, recursive = TRUE, showWarnings = FALSE)
  cptac_mqpsm_txt(dat_dir)
  cptac_mqpsm_expt(dat_dir)
  cptac_mqpsm_frac(dat_dir)	
}
## END of RUN `Mascot or Maxquant but not both`


# ===================================
# PSM normalization
# ===================================
library(proteoQ)

## RUN `Mascot or Maxquant but not both`
# see README at https://github.com/qzhang503/proteoQ for details about 
#   the applications of variable arguments (varargs)
dontrun <- TRUE
if (!dontrun) {
  ## Mascot
  dat_dir <- "C:\\\\The\\\\Mascot\\\\Example"
  dir.create(dat_dir, recursive = TRUE, showWarnings = FALSE)
  load_expts()
	
  normPSM(
    group_psm_by = pep_seq_mod,
    group_pep_by = prot_acc,
    fasta = c("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_hs_2013_07.fasta",
              "~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_mm_2013_07.fasta"),
    rptr_intco = 3000,
    rm_craps = TRUE,
    rm_krts = FALSE,
    rm_outliers = FALSE,
    annot_kinases = TRUE,
    plot_rptr_int = TRUE,
    plot_log2FC_cv = TRUE,
    
		# vararg statement(s)
    filter_psms_at = exprs(pep_expect <= .1),
    filter_by_more = exprs(pep_rank == 1, pep_exp_z > 1),
  )

  
  ## MaxQuant
  dat_dir <- c("C:\\\\The\\\\MQ\\\\Example")
  dir.create(dat_dir, recursive = TRUE, showWarnings = FALSE)
  load_expts()
	
  normPSM(
    group_psm_by = pep_seq_mod,
    group_pep_by = prot_acc,
    fasta = c("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_hs_2013_07.fasta",
              "~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_mm_2013_07.fasta"),
    corrected_int = TRUE,
    rm_reverses = TRUE,
    rptr_intco = 3000,
    rm_craps = TRUE,
    rm_krts = FALSE,
    rm_outliers = FALSE,
    annot_kinases = TRUE,
    plot_rptr_int = TRUE,
    plot_log2FC_cv = TRUE,
    
    filter_psms_at = exprs(PEP <= 0.1),
  )
}
## END of RUN `Mascot or Maxquant but not both`



# ===================================
# PSM cleanup by CV
# ===================================
# by percent CV
purgePSM(pt_cv = .95)

# by max CV
purgePSM(max_cv = .5)

# by `max_cv` then by `pt_cv`
purgePSM(max_cv = .5)
purgePSM(pt_cv = .95)

# actually 90\% CV 
purgePSM(pt_cv = .95)
purgePSM(pt_cv = .95)
}
\seealso{
\code{\link{load_expts}} for experiment setup, \code{\link{normPep}}
 for peptide data normalization, \code{\link{normPrn}} for protein data
 normalization.
}
