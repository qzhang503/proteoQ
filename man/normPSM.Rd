% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proteoQ-psmtable.R
\name{normPSM}
\alias{normPSM}
\title{Standardization of PSM results}
\usage{
normPSM(
  group_psm_by = c("pep_seq", "pep_seq_mod"),
  group_pep_by = c("prot_acc", "gene"),
  dat_dir = NULL,
  expt_smry = "expt_smry.xlsx",
  frac_smry = "frac_smry.xlsx",
  fasta = NULL,
  entrez = NULL,
  pep_unique_by = "group",
  corrected_int = TRUE,
  rm_reverses = TRUE,
  rptr_intco = 1000,
  rm_craps = FALSE,
  rm_krts = FALSE,
  rm_outliers = FALSE,
  annot_kinases = FALSE,
  plot_rptr_int = TRUE,
  plot_log2FC_cv = TRUE,
  use_lowercase_aa = TRUE,
  ...
)
}
\arguments{
\item{group_psm_by}{A character string specifying the method in PSM grouping.
At the \code{pep_seq} default, descriptive statistics will be calculated
based on the same \code{pep_seq} groups. At the \code{pep_seq_mod}
alternative, peptides with different variable modifications will be treated
as different species and descriptive statistics will be calculated based on
the same \code{pep_seq_mod} groups.}

\item{group_pep_by}{A character string specifying the method in peptide
grouping. At the \code{prot_acc} default, descriptive statistics will be
calculated based on the same \code{prot_acc} groups. At the \code{gene}
alternative, proteins with the same gene name but different accession
numbers will be treated as one group.}

\item{dat_dir}{A character string to the working directory. The default is to
match the value under the global environment.}

\item{expt_smry}{A character string to the \code{.xlsx} file containing the
metadata of TMT experiments. The default is \code{expt_smry.xlsx}.}

\item{frac_smry}{A character string to the \code{.xlsx} file containing
peptide fractionation summary. The default is \code{frac_smry.xlsx}.}

\item{fasta}{Character string(s) to the name(s) of fasta file(s) with
prepended directory path. The \code{fasta} database(s) need to match those
used in MS/MS ion search. There is no default and users need to provide the
correct file path(s) and name(s).}

\item{entrez}{Character string(s) to the name(s) of entrez file(s) with
prepended directory path. At the \code{NULL} default, a convenience lookup
is available for species among \code{c("human", "mouse", "rat")}. For other
species, users need to provide the file path(s) and name(s) for the lookup
table(s). See also \code{\link{prepEntrez}} for preparing custom entrez
files.}

\item{pep_unique_by}{A character string for annotating the uniqueness of
peptides in \code{MaxQuant} PSMs. At the \code{group} default, the
uniqueness of peptides is by protein groups. At a more strigent criterion of
\code{protein}, the uniqueness of peptides is by protein entries. A new
column of \code{pep_isunique} with corresponding logical TRUE or FALSE will
be added to the PSM reports.}

\item{corrected_int}{A logical argument for uses with \code{MaxQuant} data. At
the TRUE default, values under columns "Reporter intensity corrected..." in
\code{MaxQuant} PSM results (\code{msms.txt}) will be used. Otherwise,
"Reporter intensity" values without corrections will be used.}

\item{rm_reverses}{A logical argument for uses with \code{MaxQuant} data. At
the TRUE default, \code{Reverse} entries will be removed.}

\item{rptr_intco}{Numeric; the threshold of reporter ion intensity. The
default is 1,000.}

\item{rm_craps}{Logical; if TRUE,
\href{https://www.thegpm.org/crap/}{cRAP} proteins will be removed.
The default is FALSE.}

\item{rm_krts}{Logical; if TRUE, keratin entries will be removed. The default
is FALSE.}

\item{rm_outliers}{Logical; if TRUE, PSM outlier removals will be performed
for peptides with more than two identifying PSMs. Dixon's method will be
used when \eqn{2 < n \le 25} and Rosner's method will be used when \eqn{n >
25}. The default is FALSE.}

\item{annot_kinases}{Logical; if TRUE, proteins of human or mouse origins
will be annotated with their kinase attributes. The default is FALSE.}

\item{plot_rptr_int}{Logical; if TRUE, the distributions of reporter-ion
intensities will be plotted. The default is TRUE.}

\item{plot_log2FC_cv}{Logical; if TRUE, the distributions of the CV of peptide
\code{log2FC} will be plotted. The default is TRUE.}

\item{use_lowercase_aa}{Logical; if TRUE, modifications in amino acid
residues will be abbreviated with lower-case and/or \code{^_~}. See the
table below for details. The default is TRUE.}

\item{...}{\code{filter_}: Variable argument statements for the filtration of
data rows. Each statement contains to a list of logical expression(s). The
\code{lhs} needs to start with \code{filter_}. The logical condition(s) at
the \code{rhs} needs to be enclosed in \code{exprs} with round parenthesis.
For example, \code{pep_expect} is a column key present in \code{Mascot} PSM
exports and \code{filter_psms_at = exprs(pep_expect <= 0.1)} will remove PSM
entries with \code{pep_expect > 0.1}.}
}
\value{
Outputs are under the directory of \code{PSM} sub to \code{dat_dir}.
 Primary results are in \code{TMTset1_LCMSinj1_PSM_N.txt,
 TMTset2_LCMSinj1_PSM_N.txt, ...} The indeces of TMT experiment and LC/MS
 injection are indicated in the file names.
}
\description{
\code{normPSM} standarizes
\href{https://www.ebi.ac.uk/pride/help/archive/search/tables}{PSM}
results from \href{https://en.wikipedia.org/wiki/Tandem_mass_tag}{TMT}
experiments.
}
\details{
In each primary output file, "\code{...PSM_N.txt}", values under columns
\code{log2_R...} are logarithmic ratios at base 2 in relative to the
\code{reference(s)} within each multiplex TMT set, or to the row means if no
\code{reference(s)} are present. Values under columns \code{N_log2_R...} are
\code{log2_R...} with median-centering alignment. Values under columns
\code{I...} are raw \code{reporter-ion intensity} from database searches.
Values under columns \code{N_I...} are normalized \code{reporter-ion
intensity}. Values under columns \code{sd_log2_R...} are the standard
deviation of the \code{log2FC} of peptides from ascribing PSMs. Character
strings under \code{pep_seq_mod} denote peptide sequences with applicable
variable modifications.

\cr \strong{Nomenclature of \code{pep_seq_mod}}:

\tabular{ll}{ \emph{Variable modification}   \tab \emph{Abbreviation}\cr
Non-terminal \tab A letter from upper to lower case and the flanking residues
on the N- or C-terminal side of the peptide separated by a dot, e.g.,
\code{-.mtFPEADILLK.S} \cr N-term \tab A hat to the left of a peptide
sequence, e.g., \code{K.^QDGTHVVEAVDATHIGK.L} \cr C-term \tab A hat to the
right of a peptide sequence, e.g., \code{K.DAYYNLCLPQRPnMI^.-} \cr Acetyl
(Protein N-term) \tab A underscore to the left of a peptide sequence, e.g.,
\code{-._mAsGVAVSDGVIK.V}. \cr Amidated (Protein C-term) \tab A underscore to
the right of a peptide sequence, e.g., \code{K.DAYYNLCLPQRPnMI_.-}. \cr Other
(Protein N-term) \tab A tilde to the left of a peptide sequence, e.g.,
\code{-.~mAsGVAVSDGVIK.V} \cr Other (Protein C-term) \tab An tilde to the
right of a peptide sequence, e.g. \code{K.DAYYNLCLPQRPnMI~.-} \cr }
}
\section{\code{Mascot}}{
 End users will export \code{PSM} data from
 \href{https://http://www.matrixscience.com/}{Mascot} at a \code{.csv}
 format and store them under the file folder indicated by \code{dat_dir}. The
 header information should be included during the \code{.csv} export. The
 file name(s) should be defaulted by
 \href{https://http://www.matrixscience.com/}{Mascot}: starting with
 the letter \code{'F'}, followed by digits without space and ended with a
 \code{'.csv'} extension \code{(e.g., F004453.csv)}.
}

\section{\code{MaxQuant}}{
 End users will copy over \code{msms.txt} file(s)
 from \href{https://www.maxquant.org/}{MaxQuant} to the \code{dat_dir}
 directory. In the case of multiple \code{msms.txt} files for processing, the
 file names need to be compiled in that they all start with \code{'msms'} and
 end with a \code{'.txt'} extension.
}

\section{\code{Spectrum Mill}}{
 End users will copy over \code{PSMexport.1.ssv}
 file(s) from
 \href{https://www.agilent.com/en/products/software-informatics/masshunter-suite/masshunter-for-life-science-research/spectrum-mill}{Spectrum Mill} 
 to the \code{dat_dir} directory. In the case of multiple
 \code{PSMexport} files for processing, the file names need to be compiled in
 that they all start with \code{'PSMexport'} and end with a \code{'.ssv'}
 extension.
}

\section{\code{Variable arguments and data files}}{
 Variable argument (vararg)
 statements of \code{filter_} and \code{arrange_} are available in
 \code{proteoQ} for flexible filtration and ordering of data rows, via
 functions at users' interface. To take advantage of the feature, users need
 to be aware of the column keys in input files. As indicated by their names,
 \code{filter_} and \code{filter2_} perform row filtration against column
 keys from a primary data file, \code{df}, and secondary data file(s),
 \code{df2}, respectively. The same correspondance is applicable for
 \code{arrange_} and \code{arrange2_} varargs. \cr \cr Users will typically
 employ either primary or secondary vararg statements, but not both. In the
 more extreme case of \code{gspaMap(...)}, it links \code{\link{prnGSPA}}
 findings in \code{df2} to the significance \code{pVals} and abundance fold
 changes in \code{df} for volcano plot visualizaitons by gene sets. The table
 below summarizes the \code{df} and the \code{df2} for varargs in
 \code{proteoQ}.

 \tabular{lllll}{ 
 \strong{Utility} \tab \strong{Vararg_} \tab \strong{df} \tab \strong{Vararg2_} \tab \strong{df2} \cr
 normPSM \tab filter_ \tab Mascot, \code{F[...].csv}; MaxQuant, \code{msms[...].txt}; 
 SM, \code{PSMexport[...].ssv} \tab NA \tab NA \cr 
 PSM2Pep \tab NA \tab NA \tab NA \tab NA \cr 
 mergePep \tab filter_ \tab \code{TMTset1_LCMSinj1_Peptide_N.txt} \tab NA \tab NA \cr 
 standPep \tab slice_ \tab \code{Peptide.txt} \tab NA \tab NA \cr 
 Pep2Prn \tab filter_ \tab \code{Peptide.txt} \tab NA \tab NA \cr 
 standPrn \tab slice_\tab \code{Protein.txt} \tab NA \tab NA \cr 
 pepHist \tab filter_\tab \code{Peptide.tx}t \tab NA \tab NA \cr 
 prnHist \tab filter_\tab \code{Protein.txt} \tab NA \tab NA \cr 
 pepSig \tab filter_\tab \code{Peptide[_impNA].txt} \tab NA \tab NA \cr 
 prnSig \tab filter_\tab \code{Protein[_impNA].txt} \tab NA \tab NA \cr 
 pepMDS \tab filter_\tab \code{Peptide[_impNA][_pVal].txt} \tab NA \tab NA \cr 
 prnMDS \tab filter_\tab \code{Protein[_impNA][_pVal].txt} \tab NA \tab NA \cr 
 pepPCA \tab filter_\tab \code{Peptide[_impNA][_pVal].txt} \tab NA \tab NA \cr 
 prnPCA \tab filter_\tab \code{Protein[_impNA][_pVal].txt} \tab NA \tab NA \cr 
 pepEucDist \tab filter_\tab \code{Peptide[_impNA][_pVal].txt} \tab NA \tab NA \cr 
 prnEucDist \tab filter_\tab \code{Protein[_impNA][_pVal].txt} \tab NA \tab NA \cr 
 pepCorr_logFC \tab filter_\tab \code{Peptide[_impNA][_pVal].txt} \tab NA \tab NA \cr 
 prnCorr_logFC \tab filter_\tab \code{Protein[_impNA][_pVal].txt} \tab NA \tab NA \cr 
 pepHM \tab filter_, arrange_\tab \code{Peptide[_impNA][_pVal].txt} \tab NA \tab NA \cr 
 prnHM \tab filter_, arrange_\tab \code{Protein[_impNA][_pVal].txt} \tab NA \tab NA \cr 
 
 anal_prnTrend \tab filter_\tab \code{Protein[_impNA][_pVal].txt} \tab NA \tab NA \cr 
 plot_prnTrend \tab NA \tab NA \tab filter2_\tab \code{[...]Protein_Trend_{NZ}[_impNA][...].txt} \cr 
 
 anal_pepNMF \tab filter_\tab \code{Peptide[_impNA][_pVal].txt} \tab NA \tab NA \cr 
 anal_prnNMF \tab filter_\tab \code{Protein[_impNA][_pVal].txt} \tab NA \tab NA \cr 
 plot_pepNMFCon \tab NA \tab NA \tab filter2_\tab \code{[...]Peptide_NMF[...]_consensus.txt} \cr 
 plot_prnNMFCon \tab NA \tab NA \tab filter2_\tab \code{[...]Protein_NMF[...]_consensus.txt} \cr 
 plot_pepNMFCoef \tab NA \tab NA \tab filter2_\tab \code{[...]Peptide_NMF[...]_coef.txt} \cr 
 plot_prnNMFCoef \tab NA \tab NA \tab filter2_\tab \code{[...]Protein_NMF[...]_coef.txt} \cr 
 plot_metaNMF \tab filter_, arrange_\tab \code{Protein[_impNA][_pVal].txt} \tab NA \tab NA \cr 
 
 prnGSPA \tab filter_\tab \code{Protein[_impNA]_pVals.txt} \tab NA \tab NA \cr 
 prnGSPAHM \tab NA \tab NA \tab filter2_\tab \code{[...]Protein_GSPA_{NZ}[_impNA]_essmap.txt} \cr 
 gspaMap \tab filter_\tab \code{Protein[_impNA]_pVal.txt} \tab filter2_\tab \code{[...]Protein_GSPA_{NZ}[_impNA].txt} \cr 
 
 anal_prnString \tab filter_\tab \code{Protein[_impNA][_pVals].tx}t \tab NA \tab NA \cr 
 }
}

\examples{
\donttest{
# ===================================
# PSM normalization
# ===================================

## !!!require the brief working example in `?load_expts`

## additional examples
# Mascot
normPSM(
  group_psm_by = pep_seq_mod,
  group_pep_by = prot_acc,
  fasta = c("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_hs_2013_07.fasta",
            "~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_mm_2013_07.fasta"),
  
  # variable argument statement(s)
  filter_psms_at = exprs(pep_expect <= .1),
  filter_psms_more = exprs(pep_rank == 1, pep_exp_z > 1),
)

# MaxQuant
normPSM(
  group_psm_by = pep_seq_mod,
  group_pep_by = prot_acc,
  fasta = c("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_hs_2013_07.fasta",
            "~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_mm_2013_07.fasta"),
  corrected_int = TRUE,
  rm_reverses = TRUE,
  
  # vararg statement(s)
  filter_psms_at = exprs(PEP <= 0.1),
)

# Spectrum Mill
normPSM(
  group_psm_by = pep_seq_mod,
  group_pep_by = prot_acc,
  fasta = c("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_hs_2013_07.fasta",
            "~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_mm_2013_07.fasta"),
  
  # vararg statement(s)
  filter_psms = exprs(score >= 10),
)

###############################################
## Custom entrez lookups
#  (1) can overwrite the `proteoQ` default for 
#      species in "human", "mouse" and "rat"
#  (2) and are required for `other` species
###############################################
# see also `?prepEntrez` for more examples
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("org.Hs.eg.db")
BiocManager::install("org.Mm.eg.db")

library(org.Hs.eg.db)
library(org.Mm.eg.db)

library(proteoQ)
prepEntrez(human)
prepEntrez(mouse)

normPSM(
  group_psm_by = pep_seq_mod, 
  group_pep_by = gene, 
  fasta = c("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_hs_2013_07.fasta",
            "~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_mm_2013_07.fasta"),
  entrez = c("~\\\\proteoQ\\\\dbs\\\\entrez\\\\uniprot_entrez_hs.rds", 
             "~\\\\proteoQ\\\\dbs\\\\entrez\\\\uniprot_entrez_mm.rds"),
)

## Not run: 
# wrong fasta 
normPSM(
  fasta = "~\\\\proteoQ\\\\dbs\\\\fasta\\\\wrong.fasta",
)

# no mouse entry annotation
normPSM(
  fasta = "~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_hs_2013_07.fasta",
)

# bad vararg statement
normPSM(
  fasta = c("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_hs_2013_07.fasta",
            "~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_mm_2013_07.fasta"),
  filter_psms_at = exprs(column_key_not_in_psm_tables <= .1),
)
## End(Not run)
}
}
\seealso{
\emph{Metadata} \cr 
 \code{\link{load_expts}} for metadata preparation and a reduced working example in data normalization \cr

 \emph{Data normalization} \cr 
 \code{\link{normPSM}} for extended examples in PSM data normalization \cr
 \code{\link{PSM2Pep}} for extended examples in PSM to peptide summarization \cr 
 \code{\link{mergePep}} for extended examples in peptide data merging \cr 
 \code{\link{standPep}} for extended examples in peptide data normalization \cr
 \code{\link{Pep2Prn}} for extended examples in peptide to protein summarization \cr
 \code{\link{standPrn}} for extended examples in protein data normalization. \cr 
 \code{\link{purgePSM}} and \code{\link{purgePep}} for extended examples in data purging \cr
 \code{\link{pepHist}} and \code{\link{prnHist}} for extended examples in histogram visualization. \cr 
 \code{\link{extract_raws}} and \code{\link{extract_psm_raws}} for extracting MS file names \cr 
 
 \emph{Variable arguments of `filter_...`} \cr 
 \code{\link{contain_str}}, \code{\link{contain_chars_in}}, \code{\link{not_contain_str}}, 
 \code{\link{not_contain_chars_in}}, \code{\link{start_with_str}}, 
 \code{\link{end_with_str}}, \code{\link{start_with_chars_in}} and 
 \code{\link{ends_with_chars_in}} for data subsetting by character strings \cr 
 
 \emph{Missing values} \cr 
 \code{\link{pepImp}} and \code{\link{prnImp}} for missing value imputation \cr 
 
 \emph{Informatics} \cr 
 \code{\link{pepSig}} and \code{\link{prnSig}} for significance tests \cr 
 \code{\link{pepVol}} and \code{\link{prnVol}} for volcano plot visualization \cr 
 \code{\link{prnGSPA}} for gene set enrichment analysis by protein significance pVals \cr 
 \code{\link{gspaMap}} for mapping GSPA to volcano plot visualization \cr 
 \code{\link{prnGSPAHM}} for heat map and network visualization of GSPA results \cr 
 \code{\link{prnGSVA}} for gene set variance analysis \cr 
 \code{\link{prnGSEA}} for data preparation for online GSEA. \cr 
 \code{\link{pepMDS}} and \code{\link{prnMDS}} for MDS visualization \cr 
 \code{\link{pepPCA}} and \code{\link{prnPCA}} for PCA visualization \cr 
 \code{\link{pepHM}} and \code{\link{prnHM}} for heat map visualization \cr 
 \code{\link{pepCorr_logFC}}, \code{\link{prnCorr_logFC}}, \code{\link{pepCorr_logInt}} and 
 \code{\link{prnCorr_logInt}}  for correlation plots \cr 
 \code{\link{anal_prnTrend}} and \code{\link{plot_prnTrend}} for trend analysis and visualization \cr 
 \code{\link{anal_pepNMF}}, \code{\link{anal_prnNMF}}, \code{\link{plot_pepNMFCon}}, 
 \code{\link{plot_prnNMFCon}}, \code{\link{plot_pepNMFCoef}}, \code{\link{plot_prnNMFCoef}} and 
 \code{\link{plot_metaNMF}} for NMF analysis and visualization \cr 
 
 \emph{Custom databases} \cr 
 \code{\link{prepEntrez}} for lookups between UniProt accessions and Entrez IDs \cr
 \code{\link{prepGO}} for \code{\href{http://current.geneontology.org/products/pages/downloads.html}{gene 
 ontology}} \cr 
 \code{\link{prepMSig}} for \href{https://data.broadinstitute.org/gsea-msigdb/msigdb/release/7.0/}{molecular 
 signatures} \cr 
 \code{\link{dl_stringdbs}} and \code{\link{anal_prnString}} for STRING-DB \cr
 
 \emph{Column keys in PSM, peptide and protein outputs} \cr 
 # Mascot \cr
 system.file("extdata", "mascot_psm_keys.txt", package = "proteoQ") \cr
 system.file("extdata", "mascot_peptide_keys.txt", package = "proteoQ") \cr
 system.file("extdata", "mascot_protein_keys.txt", package = "proteoQ") \cr
 
 # MaxQuant \cr
 system.file("extdata", "maxquant_psm_keys.txt", package = "proteoQ") \cr
 system.file("extdata", "maxquant_peptide_keys.txt", package = "proteoQ") \cr
 system.file("extdata", "maxquant_protein_keys.txt", package = "proteoQ") \cr
}
