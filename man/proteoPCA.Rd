% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proteoQ-mds.R
\name{proteoPCA}
\alias{proteoPCA}
\alias{pepPCA}
\alias{prnPCA}
\title{Visualization of PCA plots}
\usage{
proteoPCA(id = gene, type = "obs", col_select = NULL,
  col_group = NULL, col_color = NULL, col_fill = NULL,
  col_shape = NULL, col_size = NULL, col_alpha = NULL,
  color_brewer = NULL, fill_brewer = NULL, size_manual = NULL,
  shape_manual = NULL, alpha_manual = NULL, scale_log2r = TRUE,
  show_ids = TRUE, annot_cols = NULL, df = NULL, filepath = NULL,
  filename = NULL, ...)

pepPCA(...)

prnPCA(...)
}
\arguments{
\item{id}{Character string to indicate the type of data. The value will be
determined automatically. Peptide data will be used at \code{id = pep_seq}
or \code{pep_seq_mod}, and protein data will be used at \code{id = prot_acc}
or \code{gene}.}

\item{type}{Character string indicating the type of PCA. At the \code{type =
obs} default, the components are by observations; at \code{type = feats},
the components are by features.}

\item{col_select}{Character string to a column key in \code{expt_smry.xlsx}.
Samples corresponding to non-empty entries under the column key will be
included in the indicated analysis. At the \code{NULL} default, the column
key will be \code{Select}.}

\item{col_group}{Not used.}

\item{col_color}{Character string to a column key in \code{expt_smry.xlsx}.
Values under which will be used for the \code{color} aesthetics in plots. At
the NULL default, the column key \code{Color} will be used.}

\item{col_fill}{Character string to a column key in \code{expt_smry.xlsx}.
Values under which will be used for the \code{fill} aesthetics in plots. At
the NULL default, the column key \code{Fill} will be used.}

\item{col_shape}{Character string to a column key in \code{expt_smry.xlsx}.
Values under which will be used for the \code{shape} aesthetics in plots. At
the NULL default, the column key \code{Shape} will be used.}

\item{col_size}{Character string to a column key in \code{expt_smry.xlsx}.
Values under which will be used for the \code{size} aesthetics in plots. At
the NULL default, the column key \code{Size} will be used.}

\item{col_alpha}{Character string to a column key in \code{expt_smry.xlsx}.
Values under which will be used for the \code{alpha} (transparency)
aesthetics in plots. At the NULL default, the column key \code{Alpha} will
be used.}

\item{color_brewer}{Character string to the name of a color brewer for use in
\href{https://ggplot2.tidyverse.org/reference/scale_brewer.html}{ggplot2::scale_color_brewer},
 i.e., \code{color_brewer = Set1}.}

\item{fill_brewer}{Character string to the name of a color brewer for use in
\href{https://ggplot2.tidyverse.org/reference/scale_brewer.html}{ggplot2::scale_fill_brewer},
i.e., \code{fill_brewer = Spectral}.}

\item{size_manual}{Numeric vector to the scale of sizes of objects in a plot,
i.e., \code{size_manual = c(8, 12)}. See also
\href{https://ggplot2.tidyverse.org/reference/scale_manual.html}{ggplot2}.}

\item{shape_manual}{Numeric vector to the scale of shape IDs, i.e.,
\code{shape_manual = c(5, 15)}. See also
\href{https://ggplot2.tidyverse.org/reference/scale_manual.html}{ggplot2}.}

\item{alpha_manual}{Numeric vector to the scale of transparency of objects in
a plot, i.e., \code{alpha_manual = c(.5, .9)}. See also
\href{https://ggplot2.tidyverse.org/reference/scale_manual.html}{ggplot2}.}

\item{scale_log2r}{Logical; if TRUE, adjusts \code{log2FC} to the same scale
of standard deviation across all samples.}

\item{show_ids}{Logical; if TRUE, shows the sample IDs in \code{MDS/PCA}
plots.}

\item{annot_cols}{Not used.}

\item{df}{The name of input data file. By default, it will be determined
automatically by the value of \code{id}.}

\item{filepath}{A file path to output results. By default, it will be
determined automatically by the name of the calling function and the value
of \code{id} in the \code{call}.}

\item{filename}{A representative file name to output image(s). By default, it
will be determined automatically by the name of the current \code{call}. The
image(s) are saved via \code{\link[ggplot2]{ggsave}} where the image type
will be determined by the extension of the file name. A \code{.png} format
will be used at default or at an unrecognized file extension.}

\item{...}{\code{filter_}: Logical expression(s) for the row filtration of
data; also see \code{\link{normPSM}}. \cr Additional parameters for
\code{ggsave}: \cr \code{width}, the width of plot; \cr \code{height}, the
height of plot \cr \code{...}}
}
\value{
PCA plots.
}
\description{
\code{proteoPCA} visualizes the results from principal component analysis
(PCA). Users should avoid call the method directly, but instead use the
following wrappers.

\code{pepPCA} is a wrapper of \code{\link{proteoPCA}} for peptide data.

\code{prnPCA} is a wrapper of \code{\link{proteoPCA}} for protein data
}
\details{
\code{log2FC} are used in PCA (\code{\link[stats]{prcomp}}).

The function matches the current \code{id} to the grouping argument in the
latest \code{call} to \code{\link{normPSM}}. See also \code{\link{prnHist}}
for details.
}
\examples{
## =========================================================================================
## Mascot workflow
## =========================================================================================

## part 1 --- setup
# FASTA files to database directory
library(proteoQDA)
dir.create("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq", recursive = TRUE, showWarnings = FALSE)
copy_refseq_hs("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq")
copy_refseq_mm("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq")

# examplary Mascot PSM data to working directory
dir.create("C:\\\\The\\\\Mascot\\\\Example", recursive = TRUE, showWarnings = FALSE)
dat_dir <- "C:\\\\The\\\\Mascot\\\\Example"
cptac_csv_1(dat_dir)

# metadata to working directory
cptac_expt_1(dat_dir)
cptac_frac_1(dat_dir)

# metadata to workspace
library(proteoQ)
load_expts()


## part 2 --- summarization of PSMs to peptides and proteins
# PSM tables
normPSM(
	group_psm_by = pep_seq, 
	group_pep_by = gene, 
	fasta = c("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_hs_2013_07.fasta", 
						"~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_mm_2013_07.fasta"), 
	rptr_intco = 3000,
	rm_craps = TRUE,
	rm_krts = FALSE,
	rm_outliers = FALSE, 
	annot_kinases = TRUE, 
	plot_rptr_int = TRUE, 
	plot_log2FC_cv = TRUE, 
	
	filter_psms = exprs(pep_expect <= .1, pep_score >= 15), 
)

# peptide tables
normPep(
	method_psm_pep = median, 
	method_align = MGKernel, 
	range_log2r = c(5, 95), 
	range_int = c(5, 95), 
	n_comp = 3, 
	seed = 749662, 
	maxit = 200, 
	epsilon = 1e-05, 
)

# protein tables
normPrn(
	method_pep_prn = median, 
	method_align = MGKernel, 
	range_log2r = c(20, 95), 
	range_int = c(5, 95), 
	n_comp = 2, 
	seed = 749662, 
	maxit = 200, 
	epsilon = 1e-05, 
)

## global setting of scaling normalization
scale_log2r = TRUE

# optional: peptide NA imputation (warning: may take a while)
pepImp(m = 2, maxit = 2)

# optional: protein NA imputation
prnImp(m = 5, maxit = 5)


## =========================================================================================
## or MaxQuant workflow
## =========================================================================================

# special guide for the installation of data package proteoQDB containing MaxQuant examples: 
#  (1) clone https://github.com/qiangzhang503/proteoQDB.git through `Github Desktop`
#  (2) local installation of proteoQDB, e.g., devtools::install("~\\\\my_dir\\\\proteoQDB")

## part 1 --- setup
# fasta files to database directory
library(proteoQDA)
dir.create("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq", recursive = TRUE, showWarnings = FALSE)
copy_refseq_hs("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq")
copy_refseq_mm("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq")

# examplary PSM data to working directory
library(proteoQDB)
dir.create("C:\\\\The\\\\MQ\\\\Example", recursive = TRUE, showWarnings = FALSE)
dat_dir <- c("C:\\\\The\\\\MQ\\\\Example")
cptac_mqpsm_txt(dat_dir)

# metadata to working directory
cptac_mqpsm_expt(dat_dir)
cptac_mqpsm_frac(dat_dir)

# metadata to workspace
library(proteoQ)
load_expts()


## part 2 --- summarization of PSMs to peptides and proteins
# PSM tables
normPSM(
	group_psm_by = pep_seq, 
	group_pep_by = gene, 
	fasta = c("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_hs_2013_07.fasta", 
					"~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_mm_2013_07.fasta"), 
	rptr_intco = 3000,					
	corrected_int = TRUE,
	rm_reverses = TRUE,
	rm_craps = TRUE,
	rm_krts = FALSE,
	rm_outliers = FALSE, 
	annot_kinases = TRUE,	
	plot_rptr_int = TRUE, 
	plot_log2FC_cv = TRUE, 
	
	filter_psms_by = exprs(PEP <= 0.1), 
)

# peptide tables
normPep(
	method_psm_pep = median, 
	method_align = MGKernel, 
	range_log2r = c(5, 95), 
	range_int = c(5, 95), 
	n_comp = 3, 
	seed = 749662, 
	maxit = 200, 
	epsilon = 1e-05, 
)

# protein tables
normPrn(
	use_unique_pep = TRUE, 
	method_pep_prn = median, 
	method_align = MGKernel, 
	range_log2r = c(20, 95), 
	range_int = c(5, 95), 
	n_comp = 2, 
	seed = 749662, 
	maxit = 200, 
	epsilon = 1e-05, 
	filter_prots_by = exprs(prot_n_pep >= 2),
)

## global setting of scaling normalization
scale_log2r = TRUE


# optional: peptide NA imputation (warning: may take a while)
pepImp(m = 2, maxit = 2)

# optional: protein NA imputation
prnImp(m = 5, maxit = 5)


# ==========================
# PCA
# ==========================

# peptide
pepPCA(
  scale_log2r = TRUE,
  col_color = Color,
  col_shape = Shape,
  show_ids = TRUE,
  filter_by_npsm = exprs(pep_n_psm >= 10),
  filename = "pepPCA_filtered.png",
)

# protein
prnPCA(
  scale_log2r = TRUE,
  col_color = Color,
  col_shape = Shape,
  show_ids = TRUE,
  filter_by_npep = exprs(prot_n_pep >= 5),
  filename = "prnPCA_filtered.png",
)

# by features
prnPCA(
  type = feats,
  scale_log2r = TRUE,
  filename = "prnPCA_by_feats.png",
)

\dontrun{
prnPCA(
  col_color = "column_key_not_existed",
  col_shape = "another_missing_column_key"
)
}

}
\seealso{
\code{\link{load_expts}} for PSM, peptide and protein data
 preparation, \code{\link{pepImp}} for NA value imputation and
 \code{\link{pepSig}} for linear modelings.
}
