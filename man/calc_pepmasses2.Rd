% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbs2.R
\name{calc_pepmasses2}
\alias{calc_pepmasses2}
\title{Generates and Calculates the masses of tryptic peptides from a fasta
database.}
\usage{
calc_pepmasses2(
  fasta = "~/proteoQ/dbs/fasta/uniprot/uniprot_hs_2020_05.fasta",
  acc_type = "uniprot_acc",
  acc_pattern = NULL,
  fixedmods = c("TMT6plex (K)", "Carbamidomethyl (C)"),
  varmods = c("TMT6plex (N-term)", "Acetyl (Protein N-term)", "Oxidation (M)",
    "Deamidated (N)", "Gln->pyro-Glu (N-term = Q)"),
  include_insource_nl = FALSE,
  index_mods = FALSE,
  enzyme = c("trypsin"),
  maxn_fasta_seqs = 50000L,
  maxn_vmods_setscombi = 64L,
  maxn_vmods_per_pep = 5L,
  maxn_sites_per_vmod = 3L,
  min_len = 7L,
  max_len = 100L,
  max_miss = 2L,
  out_path = "~/proteoQ/outs",
  digits = 4L,
  parallel = TRUE
)
}
\arguments{
\item{fasta}{Character string(s) to the name(s) of fasta file(s) with
prepended directory path. The \code{fasta} database(s) need to match those
used in MS/MS ion search. There is no default and users need to provide the
correct file path(s) and name(s).}

\item{acc_type}{Character string(s); the types of protein accessions in one
of c("uniprot_acc", "uniprot_id", "refseq_acc", "other"). For custom names,
the corresponding regular expressions need to be supplied via argument
\code{acc_pattern}.}

\item{acc_pattern}{Regular expression(s) describing the patterns to separate
the header lines of fasta entries. At the \code{NULL} default, the pattern
will be automated when \code{acc_type} are among c("uniprot_acc",
"uniprot_id", "refseq_acc", "other").}

\item{fixedmods}{A character vector of fixed modifications. See also
\link{parse_unimod} for grammars.}

\item{varmods}{A character vector of variable modifications.}

\item{include_insource_nl}{Logical Logical; if TRUE, includes MS1 precursor
masses with the losses of neutral species prior to MS2 fragmentation. The
default is FALSE. The setting at TRUE remains experimenting by allowing
additional masses in the universe of MS1 precursors. The offsets in NLs (by
adding back precursor masses) have not yet taken into account in MS2 ion
searches. A more systemically approach such as \code{open} MS1 masses might
be developed in the future.}

\item{index_mods}{Logical; if TRUE, converts the names of modifications to
indexes. Not currently used.}

\item{enzyme}{A character string; the proteolytic specificity of the assumed
enzyme will be used to generate peptide sequences from proteins. The enzyme
is currently \code{trypsin}.}

\item{maxn_fasta_seqs}{Integer; the maximum number of protein sequences in
fasta files.}

\item{maxn_vmods_setscombi}{Integer; the maximum number of combinatorial variable
modifications and neutral losses.}

\item{maxn_vmods_per_pep}{The maximum number of variable modifications per
peptide.}

\item{maxn_sites_per_vmod}{Integer; the maximum number of combinatorial
variable modifications per site in a per peptide sequence.}

\item{min_len}{Integer; the minimum length of peptides. Shorter peptides will
be excluded.}

\item{max_len}{Integer; the maximum length of peptides. Longer peptides will
be excluded.}

\item{max_miss}{The maximum number of mis-cleavages per peptide sequence.}

\item{out_path}{The output path.}

\item{digits}{Integer; the number of decimal places to be used.}

\item{parallel}{Logical; if TRUE, performs parallel computation. The default
is TRUE.}
}
\description{
Generates and Calculates the masses of tryptic peptides from a fasta
database.
}
\examples{
\donttest{
res <- calc_pepmasses()

library(purrr)
library(magrittr)

res_attrs <- map(res, attributes)
map(res_attrs, names)
res_attrs \%>\% map(`[[`, "vmods")
res_mods <- map(res_attrs, `[`,
                c("fmods", "fmods_ps", "fmods_neuloss",
                  "vmods", "vmods_ps", "vmods_neuloss"))

res_data <- map(res_attrs, `[[`, "data")
peps_combi_1 <- res_data[[1]]

# base: fixedmods without neulosses
unlist(res_data[[1]], use.names = FALSE) \%>\% length()

# fixedmods, fixedmods + fixedmods_neulosses, varmods, varmods_neulosses
unlist(res_data, use.names = FALSE) \%>\% length()

}

}
