% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proteoQ-nmf.R
\name{proteoNMF}
\alias{proteoNMF}
\alias{anal_pepNMF}
\alias{anal_prnNMF}
\alias{plot_pepNMFCon}
\alias{plot_prnNMFCon}
\alias{plot_pepNMFCoef}
\alias{plot_prnNMFCoef}
\alias{plot_metaNMF}
\title{NMF analysis}
\usage{
proteoNMF(id = c("pep_seq", "pep_seq_mod", "prot_acc", "gene"),
  col_select = NULL, col_group = NULL, scale_log2r = TRUE,
  impute_na = TRUE, complete_cases = FALSE, df = NULL,
  filepath = NULL, filename = NULL, task = "anal", r = NULL,
  nrun = 200, ...)

anal_pepNMF(...)

anal_prnNMF(...)

plot_pepNMFCon(annot_cols = NULL, annot_colnames = NULL, ...)

plot_prnNMFCon(annot_cols = NULL, annot_colnames = NULL, ...)

plot_pepNMFCoef(annot_cols = NULL, annot_colnames = NULL, ...)

plot_prnNMFCoef(annot_cols = NULL, annot_colnames = NULL, ...)

plot_metaNMF(annot_cols = NULL, annot_colnames = NULL, ...)
}
\arguments{
\item{id}{Character string to indicate the type of data. The value will be
determined automatically. Peptide data will be used at \code{id = pep_seq}
or \code{pep_seq_mod}, and protein data will be used at \code{id = prot_acc}
or \code{gene}.}

\item{col_select}{Character string to a column key in \code{expt_smry.xlsx}.
Samples corresponding to non-empty entries under the column key will be
included in the indicated analysis. At the \code{NULL} default, the column
key will be \code{Select}.}

\item{col_group}{Character string to a column key in \code{expt_smry.xlsx}.
Samples corresponding to non-empty entries under \code{col_group} will be
used for sample grouping in the indicated analysis. At the NULL default, the
column key \code{Group} will be used. No data annotation by groups will be
performed if the fields under the indicated group column is empty.}

\item{scale_log2r}{Logical; if TRUE, adjusts \code{log2FC} to the same scale
of standard deviation across all samples. The default is TRUE.}

\item{impute_na}{Logical; if TRUE, data with the imputation of missing values
will be used. The default is TRUE.}

\item{complete_cases}{Logical; if TRUE, only cases that are complete with no
missing values will be used. The default is FALSE.}

\item{df}{The name of input data file. By default, it will be determined
automatically by the value of \code{id}.}

\item{filepath}{Use system default.}

\item{filename}{Use system default.}

\item{task}{Character string; a signature for task dispatching in a function
factory. The value will be determined automatically.}

\item{r}{Numeric vector; the factorization rank(s) in \code{\link[NMF]{nmf}}.
The default is c(4:8)}

\item{nrun}{Numeric; the number of runs in \code{\link[NMF]{nmf}}. The default
is 200.}

\item{...}{In \code{anal_} functions: additional arguments are for
\code{\link[NMF]{nmf}}; \cr in \code{plot_} functions: \code{width},
\code{height}; \cr in \code{plot_metaNMF} functions: additional arguments
are for \code{pheatmap}.}

\item{annot_cols}{A character vector of column keys in \code{expt_smry.xlsx}.
The values under the selected keys will be used to color-code sample IDs on
the top of the indicated plot. The default is NULL without column
annotation.}

\item{annot_colnames}{A character vector of replacement name(s) to
\code{annot_cols}. The default is NULL without name replacement.}
}
\value{
NMF classification and visualization of \code{log2FC}.
}
\description{
\code{proteoNMF} analyzes and visualizes the NMF clustering of peptide or
protein \code{log2FC}. Users should avoid calling the method directly, but
instead use the following wrappers.

\code{anal_pepNMF} is a wrapper of \code{\link{proteoNMF}} for the NMF
analysis of peptide data

\code{anal_prnNMF} is a wrapper of \code{\link{proteoNMF}} for the NMF
analysis of protein data

\code{plot_pepNMFCon} is a wrapper of \code{\link{proteoNMF}} for the
visualization of the consensus heat map of peptide data

\code{plot_prnNMFCon} is a wrapper of \code{\link{proteoNMF}} for the
visualization of the consensus heat map of protein data

\code{plot_pepNMFCoef} is a wrapper of \code{\link{proteoNMF}} for the
visualization of the coefficient heat map of peptide data

\code{plot_prnNMFCoef} is a wrapper of \code{\link{proteoNMF}} for the
visualization of the coefficient heat map of protein data

\code{plot_metaNMF} is a wrapper of \code{\link{proteoNMF}} for the
visualization of the metagene heat maps of protein data
}
\details{
The option of \code{complete_cases} will be forced to \code{TRUE} at
\code{impute_na = FALSE}.
}
\examples{
# ===================================
# NMF
# ===================================

## !!!require the brief working example in `?load_expts`

## global option
scale_log2r <- TRUE

library(NMF)

# ===================================
# Analysis
# ===================================
## base (proteins)
anal_prnNMF(
  impute_na = FALSE,
  col_group = Group,
  r = c(3:4),
  nrun = 20, 
)

## row filtration (proteins)
anal_prnNMF(
  impute_na = FALSE,
  col_group = Group,
  r = c(3:4),
  nrun = 20, 
  filter_prots = exprs(prot_n_pep >= 3),
)

## additional row filtration by pVals (proteins, impute_na = FALSE)
# if not yet, run prerequisitive significance tests at `impute_na = FALSE`
pepSig(
  impute_na = FALSE, 
  W2_bat = ~ Term["(W2.BI.TMT2-W2.BI.TMT1)", 
                  "(W2.JHU.TMT2-W2.JHU.TMT1)", 
                  "(W2.PNNL.TMT2-W2.PNNL.TMT1)"],
  W2_loc = ~ Term_2["W2.BI-W2.JHU", 
                    "W2.BI-W2.PNNL", 
                    "W2.JHU-W2.PNNL"],
  W16_vs_W2 = ~ Term_3["W16-W2"], 
)

prnSig(impute_na = FALSE)

# (`W2_bat.pVal ((W2.BI.TMT2-W2.BI.TMT1))` is now a column key)
anal_prnNMF(
  impute_na = FALSE,
  col_group = Group,
  r = c(3:4),
  nrun = 20, 
  filter_prots_by_npep = exprs(prot_n_pep >= 3), 
  filter_prots_by_pval = exprs(`W2_bat.pVal ((W2.BI.TMT2-W2.BI.TMT1))` <= 1e-6), 
)

## additional row filtration by pVals (impute_na = TRUE)
# if not yet, run prerequisitive NA imputation
pepImp(m = 2, maxit = 2)
prnImp(m = 5, maxit = 5)

# if not yet, run prerequisitive significance tests at `impute_na = TRUE`
pepSig(
  impute_na = TRUE, 
  W2_bat = ~ Term["(W2.BI.TMT2-W2.BI.TMT1)", 
                  "(W2.JHU.TMT2-W2.JHU.TMT1)", 
                  "(W2.PNNL.TMT2-W2.PNNL.TMT1)"],
  W2_loc = ~ Term_2["W2.BI-W2.JHU", 
                    "W2.BI-W2.PNNL", 
                    "W2.JHU-W2.PNNL"],
  W16_vs_W2 = ~ Term_3["W16-W2"], 
)

prnSig(impute_na = TRUE)

anal_prnNMF(
  impute_na = TRUE,
  col_group = Group,
  r = c(3:4),
  nrun = 20, 
  filter_prots_by_npep = exprs(prot_n_pep >= 3), 
  filter_prots_by_pval = exprs(`W2_bat.pVal ((W2.BI.TMT2-W2.BI.TMT1))` <= 1e-6), 
)

## analogous peptides
anal_pepNMF(
  impute_na = TRUE,
  col_group = Group,
  r = c(3:4),
  nrun = 20, 
  filter_peps = exprs(pep_n_psm >= 2),
  filter_prots_by_npep = exprs(prot_n_pep >= 3), 
  filter_prots_by_pval = exprs(`W2_bat.pVal ((W2.BI.TMT2-W2.BI.TMT1))` <= 1e-6), 
)

# ===================================
# consensus heat maps
# ===================================
## no NA imputation 
# proteins, all available ranks
plot_prnNMFCon(
  impute_na = FALSE,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  width = 10,
  height = 10,
)

# proteins, specific rank(s)
plot_prnNMFCon(
  impute_na = FALSE,
  r = 3,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  width = 10,
  height = 10,
)

# analogous peptides
plot_pepNMFCon(
  impute_na = FALSE,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  width = 10,
  height = 10,
)

## NA imputation 
# proteins, all available ranks
plot_prnNMFCon(
  impute_na = TRUE,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  width = 10,
  height = 10,
)

# proteins, specific rank(s)
plot_prnNMFCon(
  impute_na = TRUE,
  r = 3,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  width = 10,
  height = 10,
)

# analogous peptides
plot_pepNMFCon(
  impute_na = TRUE,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  width = 10,
  height = 10,
)

# ===================================
# coefficient heat maps
# ===================================
## no NA imputation 
# proteins, all available ranks
plot_prnNMFCoef(
  impute_na = FALSE,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  width = 10,
  height = 10,
)

# proteins, specific rank(s)
plot_prnNMFCoef(
  impute_na = FALSE,
  r = 3,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  width = 10,
  height = 10,
)

# analogous peptides
plot_pepNMFCoef(
  impute_na = FALSE,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  width = 10,
  height = 10,
)

## NA imputation 
# proteins, all available ranks
plot_prnNMFCoef(
  impute_na = TRUE,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  width = 10,
  height = 10,
)

# proteins, specific rank(s)
plot_prnNMFCoef(
  impute_na = TRUE,
  r = 3,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  width = 10,
  height = 10,
)

# analogous peptides
plot_pepNMFCoef(
  impute_na = TRUE,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  width = 10,
  height = 10,
)

# ===================================
# Metagene heat maps
# ===================================
## no NA imputation 
# proteins, all available ranks
plot_metaNMF(
  impute_na = FALSE,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  
  # additional arguments for `pheatmap`
  fontsize = 8,
  fontsize_col = 5,
)

# proteins, specific rank(s)
plot_metaNMF(
  impute_na = FALSE,
  r = 3,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  fontsize = 8,
  fontsize_col = 5,
)

## NA imputation 
# proteins, all available ranks
plot_metaNMF(
  impute_na = TRUE,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  fontsize = 8,
  fontsize_col = 5,
)

# proteins, specific rank(s)
plot_metaNMF(
  impute_na = TRUE,
  r = 3,
  annot_cols = c("Color", "Alpha", "Shape"),
  annot_colnames = c("Lab", "Batch", "WHIM"),
  fontsize = 8,
  fontsize_col = 5,
)
}
\seealso{
\code{\link{load_expts}} for a reduced working example in data normalization \cr 

 \code{\link{normPSM}} for extended examples in PSM data normalization \cr
 \code{\link{PSM2Pep}} for extended examples in PSM to peptide summarization \cr 
 \code{\link{mergePep}} for extended examples in peptide data merging \cr 
 \code{\link{standPep}} for extended examples in peptide data normalization \cr
 \code{\link{Pep2Prn}} for extended examples in peptide to protein summarization \cr
 \code{\link{standPrn}} for extended examples in protein data normalization. \cr 
 \code{\link{purgePSM}} and \code{\link{purgePep}} for extended examples in data purging \cr
 \code{\link{pepHist}} and \code{\link{prnHist}} for extended examples in histogram visualization. \cr 
 \code{\link{extract_raws}} and \code{\link{extract_psm_raws}} for extracting MS file names \cr 
 
 \code{\link{contain_str}}, \code{\link{contain_chars_in}}, \code{\link{not_contain_str}}, 
 \code{\link{not_contain_chars_in}}, \code{\link{start_with_str}}, 
 \code{\link{end_with_str}}, \code{\link{start_with_chars_in}} and 
 \code{\link{ends_with_chars_in}} for data subsetting by character strings \cr 
 
 \code{\link{pepImp}} and \code{\link{prnImp}} for missing value imputation \cr 
 \code{\link{pepSig}} and \code{\link{prnSig}} for significance tests \cr 
 \code{\link{pepVol}} and \code{\link{prnVol}} for volcano plot visualization \cr 
 
 \code{\link{gspaMap}} for mapping GSPA to volcano plot visualization \cr 
 \code{\link{prnGSPA}} for gene set enrichment analysis by protein significance pVals \cr 
 \code{\link{prnGSPAHM}} for heat map and network visualization of GSPA results \cr 
 \code{\link{prnGSVA}} for gene set variance analysis \cr 
 \code{\link{prnGSEA}} for data preparation for online GSEA. \cr 
 
 \code{\link{pepMDS}} and \code{\link{prnMDS}} for MDS visualization \cr 
 \code{\link{pepPCA}} and \code{\link{prnPcA}} for PCA visualization \cr 
 \code{\link{pepHM}} and \code{\link{prnHM}} for heat map visualization \cr 
 \code{\link{pepCorr_logFC}}, \code{\link{prnCorr_logFC}}, \code{\link{pepCorr_logInt}} and 
 \code{\link{prnCorr_logInt}}  for correlation plots \cr 
 
 \code{\link{anal_prnTrend}} and \code{\link{plot_prnTrend}} for protein trend analysis and visualization \cr 
 \code{\link{anal_pepNMF}}, \code{\link{anal_prnNMF}}, \code{\link{plot_pepNMFCon}}, 
 \code{\link{plot_prnNMFCon}}, \code{\link{plot_pepNMFCoef}}, \code{\link{plot_prnNMFCoef}} and 
 \code{\link{plot_metaNMF}} for protein NMF analysis and visualization \cr 
 
 \code{\link{dl_stringdbs}} and \code{\link{getStringDB}} for STRING-DB
}
