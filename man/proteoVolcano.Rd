% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proteoQ-volcanos.R
\name{proteoVolcano}
\alias{proteoVolcano}
\alias{pepVol}
\alias{prnVol}
\alias{gspaMap}
\title{Volcano plot visualization}
\usage{
proteoVolcano(id = "gene", anal_type = "Volcano", df = NULL,
  scale_log2r = TRUE, filepath = NULL, filename = NULL,
  fml_nms = NULL, impute_na = TRUE, adjP = FALSE,
  show_labels = TRUE, pval_cutoff = 0.05, logFC_cutoff = log2(1.2),
  show_sig = "none", gset_nms = c("go_sets", "kegg_sets"), ...)

pepVol(...)

prnVol(...)

gspaMap(...)
}
\arguments{
\item{id}{Character string to indicate the type of data. The value will be
determined automatically. Peptide data will be used at \code{id = pep_seq}
or \code{pep_seq_mod}, and protein data will be used at \code{id = prot_acc}
or \code{gene}.}

\item{anal_type}{Character string; the type of analysis that are preset for
method dispatch in function factories; Values include \code{anal_type =
c("PCA", "Corrplot", "EucDist", "GSPA", "Heatmap", "Histogram", "MDS", "Model", 
"NMF", "Purge", "Trend", ...)}.}

\item{df}{The name of input data file. By default, it will be determined
automatically by the value of \code{id}.}

\item{scale_log2r}{Logical; if TRUE, adjusts \code{log2FC} to the same scale
of standard deviation across all samples.}

\item{filepath}{A file path to output results. By default, it will be
determined automatically by the name of the calling function and the value
of \code{id} in the \code{call}.}

\item{filename}{A representative file name to output image(s). By default, it
will be determined automatically by the name of the current \code{call}. The
image(s) are saved via \code{\link[ggplot2]{ggsave}} where the image type
will be determined by the extension of the file name. A \code{.png} format
will be used at default or at an unrecognized file extension.}

\item{fml_nms}{Character string or vector; the forumula name(s). By default,
the names match to those used in \code{\link{pepSig}} or
\code{\link{prnSig}}.}

\item{impute_na}{Logical; if TRUE, data with the imputation of missing values
will be used.}

\item{adjP}{Logical; if TRUE, use Benjamini-Hochberg pVals.}

\item{show_labels}{Logical; if TRUE, shows the labels of top twenty entries.}

\item{pval_cutoff}{Numeric value or vector. \code{Gene sets} with enrichment
\code{pVals} less significant than the threshold will be excluded for
volcano plot visualization. The argument is not used in \code{prnVol} and
\code{pepVol}.}

\item{logFC_cutoff}{Numeric value or vector. \code{Gene sets} with absolute
enrichment \code{log2FC} less than the threshold will be excluded for
volcano plot visualization. The cut-off is in a logarithmic base of 2, not
in a linear scale. The argument is not used in \code{prnVol} and
\code{pepVol}.}

\item{show_sig}{Character string indicating the type of significance values to
be shown on the volcano plots of gene sets. The default is \code{"none"}.
Additional choices are from \code{c("pVal", "qVal")} where \code{pVal} or
\code{qVal} will be shown, respectively, in the facet grid of the plots. The
argument is not used in \code{prnVol} and \code{pepVol}.}

\item{gset_nms}{Character string or vector containing the name(s) of gene
sets. The argument is not used in \code{prnVol} and \code{pepVol}.}

\item{...}{\code{filter_}: Logical expression(s) for the row filtration of
data; also see \code{\link{normPSM}}. \cr \cr Additional parameters for
plotting: \cr \code{xco}, the cut-off lines of fold changes at position
\code{x}; the default is at \eqn{-1.2} and \eqn{+1.2}. \cr \code{yco}, the
cut-off line of \code{pVal} at position \code{y}; the default is \eqn{0.05}.
\cr \code{width}, the width of plot; \cr \code{height}, the height of plot.
\cr \code{nrow}, the number of rows in a plot.}
}
\description{
\code{proteoVolcano} visualizes the volcano plots of peptide or protein data,
or protein subgroups under the same gene sets. Users should avoid call the
method directly, but instead use the following wrappers.

\code{pepVol} is a wrapper of \code{\link{proteoVolcano}} for peptide data

\code{prnVol} is a wrapper of \code{\link{proteoVolcano}} for protein data

\code{gspaMap} is a wrapper of \code{\link{proteoVolcano}} for
mapping of protein data by gene sets.
}
\details{
By default, the value of \code{gset_nms} in \code{gspaMap(...)} will match to
the one in the latest call to \code{\link{prnGSPA}}.
}
\examples{
# ===================================
# Prerequisite Fasta and PSM files
# ===================================
library(proteoQDA)
fasta_dir <- "~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq"
dir.create(fasta_dir, recursive = TRUE, showWarnings = FALSE)
copy_refseq_hs(fasta_dir)
copy_refseq_mm(fasta_dir)

## RUN `Mascot or Maxquant but not both`
dontrun <- TRUE
if (!dontrun) {
  # Mascot
  dat_dir <- "C:\\\\The\\\\Mascot\\\\Example"
  dir.create(dat_dir, recursive = TRUE, showWarnings = FALSE)
  cptac_csv_1(dat_dir)
  cptac_expt_1(dat_dir)
  cptac_frac_1(dat_dir)
  
  # Maxquant
  #   to install package `proteoQDB` containing MaxQuant examples: 
  #    (1) clone https://github.com/qiangzhang503/proteoQDB.git through `Github Desktop`
  #    (2) local installation of proteoQDB, e.g., devtools::install("~\\\\my_dir\\\\proteoQDB")
  library(proteoQDB)
  dat_dir <- c("C:\\\\The\\\\MQ\\\\Example")
  dir.create(dat_dir, recursive = TRUE, showWarnings = FALSE)
  cptac_mqpsm_txt(dat_dir)
  cptac_mqpsm_expt(dat_dir)
  cptac_mqpsm_frac(dat_dir)	
}
## END of RUN `Mascot or Maxquant but not both`


# ===================================
# Prerequisite PSM normalization
# ===================================
library(proteoQ)

## RUN `Mascot or Maxquant but not both`
dontrun <- TRUE
if (!dontrun) {
  # Mascot
  dat_dir <- "C:\\\\The\\\\Mascot\\\\Example"

  # Maxquant
  dat_dir <- c("C:\\\\The\\\\MQ\\\\Example")
}
## END of RUN `Mascot or Maxquant but not both`

dir.create(dat_dir, recursive = TRUE, showWarnings = FALSE)

load_expts()

normPSM(
  group_psm_by = pep_seq_mod, 
  fasta = c("~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_hs_2013_07.fasta", 
            "~\\\\proteoQ\\\\dbs\\\\fasta\\\\refseq\\\\refseq_mm_2013_07.fasta"), 
)


# ===================================
# Prerequisite peptide normalization
# ===================================
normPep(
  method_align = MGKernel, 
  n_comp = 3, 
  seed = 749662, 
)


# ===================================
# Prerequisite protein normalization
# ===================================
normPrn(
  method_align = MGKernel, 
  n_comp = 2, 
  seed = 749662, 
)


# ===================================
# Optional NA imputation
# ===================================
# peptide
pepImp(m = 2, maxit = 2)

# protein
prnImp(m = 5, maxit = 5)



# ===================================
# Prerequisite significance tests
# for use with `pepVol` and `prnVol`
# ===================================
scale_log2r <- TRUE

## RUN `Mascot or Maxquant but not both`
dontrun <- TRUE
if (!dontrun) {
  # Mascot
  # peptide significance tests
  pepSig(
    impute_na = FALSE, 
    W2_bat = ~ Term["(W2.BI.TMT2-W2.BI.TMT1)", "(W2.JHU.TMT2-W2.JHU.TMT1)", "(W2.PNNL.TMT2-W2.PNNL.TMT1)"], # batch effects
    W2_loc = ~ Term_2["W2.BI-W2.JHU", "W2.BI-W2.PNNL", "W2.JHU-W2.PNNL"], # location effects
    W16_vs_W2 = ~ Term_3["W16-W2"], 
  )
  
  # protein significance tests
  prnSig(
    impute_na = FALSE, 
    W2_bat = ~ Term["(W2.BI.TMT2-W2.BI.TMT1)", "(W2.JHU.TMT2-W2.JHU.TMT1)", "(W2.PNNL.TMT2-W2.PNNL.TMT1)"], # batch effects
    W2_loc = ~ Term_2["W2.BI-W2.JHU", "W2.BI-W2.PNNL", "W2.JHU-W2.PNNL"], # location effects
    W16_vs_W2 = ~ Term_3["W16-W2"], # between two WHIMs
  )
  
  	
  # MaxQuant
  # peptide significance tests
  pepSig(
    impute_na = FALSE, 
    W16_vs_W2_fine = ~ Term["W16.BI-W2.BI", "W16.JHU-W2.JHU", "W16.PNNL-W2.PNNL"],
    W16_vs_W2_course = ~ Term_2["W16-W2"], 
  )
  
  # protein significance tests
  prnSig(
    impute_na = FALSE, 
    W16_vs_W2_fine = ~ Term["W16.BI-W2.BI", "W16.JHU-W2.JHU", "W16.PNNL-W2.PNNL"],
    W16_vs_W2_course = ~ Term_2["W16-W2"], 
  )
}
## END of RUN `Mascot or Maxquant but not both`


# ===================================
# Prerequisite gene-set tests
# for use with `gspaMap()`
# ===================================
prnGSPA(
  pval_cutoff = 5E-2,
  logFC_cutoff = log2(1.2),
  gspval_cutoff = 5E-2,
  gset_nms = c("go_sets", "kegg_sets"),
  impute_na = FALSE,
)



# ===================================
# Volcano plot
# ===================================
scale_log2r <- TRUE

# all peptides
pepVol()

# all proteins
prnVol(
  show_labels = TRUE,
  xco = 1.2,
  yco = 0.01,
)

# kinases and prot_n_pep >= 2
prnVol(
  show_labels = TRUE,
  xco = 1.2,
  yco = 0.01,
  filter_by_kin = exprs(kin_attr, prot_n_pep >= 2),
  filename = "prnvol_kin_npep2.png"
)


# protein subgroups by gene sets
# filtered by proteins with two or more identifying peptides for visualization
gspaMap(
  pval_cutoff = 5E-3,
  logFC_cutoff = log2(1.2),
  gset_nms = c("go_sets"),
  show_sig = p,
  show_labels = TRUE,
  yco = 0.01,
  filter_by_npep = exprs(prot_n_pep >= 2),
  # `filename`(s) will be automated, i.e., by gene-set names
)

# customized thresholds for the corresponding formulae in `prnSig()`
gspaMap(
  fml_nms = c("W2_bat", "W2_loc", "W16_vs_W2"),
  pval_cutoff = c(5E-2, 5E-2, 1E-10),
  logFC_cutoff = log2(1.2),

  show_sig = pVal,
  show_labels = TRUE,
  yco = 0.05,
  filter_by_npep = exprs(prot_n_pep >= 2),
)

}
\seealso{
\code{\link{prnGSPA}} for enrichment analysis against gene sets,
 \code{\link{gspaMap}} for the visualization of gene sets under volcano
 plots.
}
