% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proteoQ-gsva.R
\name{prnGSVA}
\alias{prnGSVA}
\title{GSVA of protein data}
\usage{
prnGSVA(
  gset_nms = c("go_sets", "c2_msig"),
  scale_log2r = TRUE,
  complete_cases = FALSE,
  impute_na = FALSE,
  df = NULL,
  filepath = NULL,
  filename = NULL,
  var_cutoff = 0.5,
  pval_cutoff = 1e-04,
  logFC_cutoff = log2(1.1),
  lm_method = "limma",
  ...
)
}
\arguments{
\item{gset_nms}{Character string or vector containing the shorthanded name(s),
full file path(s) or both to gene sets for enrichment analysis. For species
among \code{"human", "mouse", "rat"}, the default of \code{c("go_sets",
"c2_msig")} will utilize terms from both gene ontology (\code{GO}) and
molecular signatures (\code{MSig}). Custom data bases of \code{GO} and
curated \code{MSig}, and/or additional species are also supported. See also
\code{\link{prepGO}} for the preparation of custom \code{GO} and
\code{\link{prepMSig}} for the preparation of custom \code{MSig}.}

\item{scale_log2r}{Logical; if TRUE, adjusts \code{log2FC} to the same scale
of standard deviation across all samples. The default is TRUE.}

\item{complete_cases}{Logical; if TRUE, only cases that are complete with no
missing values will be used. The default is FALSE.}

\item{impute_na}{Logical; if TRUE, data with the imputation of missing values
will be used. The default is FALSE.}

\item{df}{The name of a primary data file. By default, it will be determined
automatically after matching the types of data and analysis with an
\code{id} among \code{c("pep_seq", "pep_seq_mod", "prot_acc", "gene")}. A
primary file contains normalized peptide or protein data and is among
\code{c("Peptide.txt", "Peptide_pVal.txt", "Peptide_impNA_pVal.txt",
"Protein.txt", "Protein_pVal.txt", "protein_impNA_pVal.txt")}. For analyses
require the fields of significance p-values, the \code{df} will be one of
\code{c("Peptide_pVal.txt", "Peptide_impNA_pVal.txt", "Protein_pVal.txt",
"protein_impNA_pVal.txt")}.}

\item{filepath}{Use system default.}

\item{filename}{A representative file name to outputs. By default, it will be
determined automatically by the name of the current call.}

\item{var_cutoff}{Numeric; the cut-off in the variances of protein log2FC.
Entries with variances smaller than the threshold will be removed from GSVA.
The default is 0.5.}

\item{pval_cutoff}{Numeric; the cut-off in enrichment pVals. Terms with
enrichment pVals smaller than the threshold will be removed from multiple
test corrections. The default is 1e-04.}

\item{logFC_cutoff}{Numeric; the cut-off in enrichment log2FC. Terms with
absolute log2FC smaller than the threshold will be removed from multiple
test corrections. The default is at log2(1.1).}

\item{lm_method}{Character string indicating the linear modeling method for
significance assessment of GSVA enrichment scores. The default is
\code{limma}. At \code{method = lm}, the \code{lm()} in base R will be used
for models without random effects and the \code{\link[lmerTest]{lmer}} will
be used for models with random effects.}

\item{...}{\code{filter_}: Logical expression(s) for the row filtration
against data in a primary file of \code{\\Model\\Protein[_impNA]_pVals.txt}.
See also \code{\link{normPSM}} for the format of \code{filter_} statements.
\cr \cr \code{arrange_}: Variable argument statements for the row ordering
against data in a primary file linked to \code{df}. See also
\code{\link{prnHM}} for the format of \code{arrange_} statements. \cr \cr
Additional arguments for \code{\link[GSVA]{gsva}}}
}
\description{
\code{prnGSVA} performs the GSVA against protein \code{log2FC}. It is a
wrapper of \code{\link[GSVA]{gsva}}.
}
\details{
The formula(s) of contrast(s) used in \code{\link{pepSig}} will be taken by
default.
}
\examples{
\donttest{
# ===================================
# GSVA
# ===================================

## !!!require the brief working example in `?load_expts`

## global option
scale_log2r <- TRUE

## base
prnGSVA(
  impute_na = FALSE,
  min.sz = 10,
  verbose = FALSE,
  parallel.sz = 0,
  mx.diff = TRUE,
  gset_nms = "go_sets",
)

## row filtration
prnGSVA(
  impute_na = FALSE,
  min.sz = 10,
  verbose = FALSE,
  parallel.sz = 0,
  mx.diff = TRUE,
  gset_nms = c("go_sets", "kegg_sets"),
  filter_prots = exprs(prot_n_pep >= 3), 
  filename = fil.txt,
)

## additional row filtration by pVals (impute_na = FALSE)
# if not yet, run prerequisitive significance tests at `impute_na = FALSE`
pepSig(
  impute_na = FALSE, 
  W2_bat = ~ Term["W2.BI.TMT2-W2.BI.TMT1", 
                  "W2.JHU.TMT2-W2.JHU.TMT1", 
                  "W2.PNNL.TMT2-W2.PNNL.TMT1"],
  W2_loc = ~ Term_2["W2.BI-W2.JHU", 
                    "W2.BI-W2.PNNL", 
                    "W2.JHU-W2.PNNL"],
  W16_vs_W2 = ~ Term_3["W16-W2"], 
)

prnSig(impute_na = FALSE)

# (`W16_vs_W2.pVal (W16-W2)` is now a column key)
prnGSVA(
  min.sz = 10,
  verbose = FALSE,
  parallel.sz = 0,
  mx.diff = TRUE,
  gset_nms = "go_sets",
  filter_prots_by_npep = exprs(prot_n_pep >= 3), 
  filter_prots_by_pval = exprs(`W16_vs_W2.pVal (W16-W2)` <= 1e-6), 
)

## additional row filtration by pVals (impute_na = TRUE)
# if not yet, run prerequisitive NA imputation
pepImp(m = 2, maxit = 2)
prnImp(m = 5, maxit = 5)

# if not yet, run prerequisitive significance tests at `impute_na = TRUE`
pepSig(
  impute_na = TRUE, 
  W2_bat = ~ Term["W2.BI.TMT2-W2.BI.TMT1", 
                  "W2.JHU.TMT2-W2.JHU.TMT1", 
                  "W2.PNNL.TMT2-W2.PNNL.TMT1"],
  W2_loc = ~ Term_2["W2.BI-W2.JHU", 
                    "W2.BI-W2.PNNL", 
                    "W2.JHU-W2.PNNL"],
  W16_vs_W2 = ~ Term_3["W16-W2"], 
)

prnSig(impute_na = TRUE)

prnGSVA(
  impute_na = TRUE, 
  min.sz = 10,
  verbose = FALSE,
  parallel.sz = 0,
  mx.diff = TRUE,
  gset_nms = "go_sets",
  filter_prots_by_npep = exprs(prot_n_pep >= 3), 
  filter_prots_by_pval = exprs(`W16_vs_W2.pVal (W16-W2)` <= 1e-6), 
)

## custom data bases
# see also ?proteoQ::prepGO
prepGO(human)
prepGO(mouse)

prnGSVA(
  impute_na = FALSE,
  min.sz = 10,
  verbose = FALSE,
  parallel.sz = 0,
  mx.diff = TRUE,
  gset_nms = c("~\\\\proteoQ\\\\dbs\\\\go\\\\go_hs.rds",
               "~\\\\proteoQ\\\\dbs\\\\go\\\\go_mm.rds"),
)
}
}
\seealso{
\emph{Metadata} \cr 
 \code{\link{load_expts}} for metadata preparation and a reduced working example in data normalization \cr

 \emph{Data normalization} \cr 
 \code{\link{normPSM}} for extended examples in PSM data normalization \cr
 \code{\link{PSM2Pep}} for extended examples in PSM to peptide summarization \cr 
 \code{\link{mergePep}} for extended examples in peptide data merging \cr 
 \code{\link{standPep}} for extended examples in peptide data normalization \cr
 \code{\link{Pep2Prn}} for extended examples in peptide to protein summarization \cr
 \code{\link{standPrn}} for extended examples in protein data normalization. \cr 
 \code{\link{purgePSM}} and \code{\link{purgePep}} for extended examples in data purging \cr
 \code{\link{pepHist}} and \code{\link{prnHist}} for extended examples in histogram visualization. \cr 
 \code{\link{extract_raws}} and \code{\link{extract_psm_raws}} for extracting MS file names \cr 
 
 \emph{Variable arguments of `filter_...`} \cr 
 \code{\link{contain_str}}, \code{\link{contain_chars_in}}, \code{\link{not_contain_str}}, 
 \code{\link{not_contain_chars_in}}, \code{\link{start_with_str}}, 
 \code{\link{end_with_str}}, \code{\link{start_with_chars_in}} and 
 \code{\link{ends_with_chars_in}} for data subsetting by character strings \cr 
 
 \emph{Missing values} \cr 
 \code{\link{pepImp}} and \code{\link{prnImp}} for missing value imputation \cr 
 
 \emph{Informatics} \cr 
 \code{\link{pepSig}} and \code{\link{prnSig}} for significance tests \cr 
 \code{\link{pepVol}} and \code{\link{prnVol}} for volcano plot visualization \cr 
 \code{\link{prnGSPA}} for gene set enrichment analysis by protein significance pVals \cr 
 \code{\link{gspaMap}} for mapping GSPA to volcano plot visualization \cr 
 \code{\link{prnGSPAHM}} for heat map and network visualization of GSPA results \cr 
 \code{\link{prnGSVA}} for gene set variance analysis \cr 
 \code{\link{prnGSEA}} for data preparation for online GSEA. \cr 
 \code{\link{pepMDS}} and \code{\link{prnMDS}} for MDS visualization \cr 
 \code{\link{pepPCA}} and \code{\link{prnPCA}} for PCA visualization \cr 
 \code{\link{pepHM}} and \code{\link{prnHM}} for heat map visualization \cr 
 \code{\link{pepCorr_logFC}}, \code{\link{prnCorr_logFC}}, \code{\link{pepCorr_logInt}} and 
 \code{\link{prnCorr_logInt}}  for correlation plots \cr 
 \code{\link{anal_prnTrend}} and \code{\link{plot_prnTrend}} for trend analysis and visualization \cr 
 \code{\link{anal_pepNMF}}, \code{\link{anal_prnNMF}}, \code{\link{plot_pepNMFCon}}, 
 \code{\link{plot_prnNMFCon}}, \code{\link{plot_pepNMFCoef}}, \code{\link{plot_prnNMFCoef}} and 
 \code{\link{plot_metaNMF}} for NMF analysis and visualization \cr 
 
 \emph{Custom databases} \cr 
 \code{\link{Uni2Entrez}} for lookups between UniProt accessions and Entrez IDs \cr 
 \code{\link{Ref2Entrez}} for lookups among RefSeq accessions, gene names and Entrez IDs \cr 
 \code{\link{prepGO}} for \code{\href{http://current.geneontology.org/products/pages/downloads.html}{gene 
 ontology}} \cr 
 \code{\link{prepMSig}} for \href{https://data.broadinstitute.org/gsea-msigdb/msigdb/release/7.0/}{molecular 
 signatures} \cr 
 \code{\link{dl_stringdbs}} and \code{\link{anal_prnString}} for STRING-DB \cr
 
 \emph{Column keys in PSM, peptide and protein outputs} \cr 
 # Mascot \cr
 system.file("extdata", "mascot_psm_keys.txt", package = "proteoQ") \cr
 system.file("extdata", "mascot_peptide_keys.txt", package = "proteoQ") \cr
 system.file("extdata", "mascot_protein_keys.txt", package = "proteoQ") \cr
 
 # MaxQuant \cr
 system.file("extdata", "maxquant_psm_keys.txt", package = "proteoQ") \cr
 system.file("extdata", "maxquant_peptide_keys.txt", package = "proteoQ") \cr
 system.file("extdata", "maxquant_protein_keys.txt", package = "proteoQ") \cr
}
