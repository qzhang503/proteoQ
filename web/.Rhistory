flowchart <- list(name = "preprocessing",
children = list(list(name = "metadata",
children = list(
list(name = "?load_expts",
children = list(
list(name = "expt_smry.xlsx",
children = list(
list(name = "Sample_ID"),
list(name = "TMT_Set"),
list(name = "LCMS_Injection"),
list(name = "TMT_Channel"),
list(name = "Reference"),
list(name = "..."))),
list(name = "frac_smry.xlsx",
children = list(
# list(name = "TMT_Set"),
# list(name = "LCMS_Injection"),
list(name = "RAW_File"),
list(name = "?extract_psm_raws"),
list(name = "?extract_raws"),
list(name = "PSM_File"),
list(name = "...")))))
)),
list(name = "normalization",
children = list(
list(name = "?normPSM",
children = list(
list(name = "fasta",
children = list(
list(name = "UniProt"),
list(name = "RefSeq")
)),
list(name = "entrez",
children = list(
list(name = "?Uni2Entrez"),
list(name = "?Ref2Entrez")
)),
list(name = "dot-dot-dot",
children = list(
list(name = "filter_ = ...")
))
)),
list(name = "?purgePSM",
children = list(
list(name = "dot-dot-dot",
children = list(
list(name = "width, height, etc.")
))
)),
list(name = "?PSM2Pep",
children = list(
list(name = "dot-dot-dot",
children = list(
list(name = "filter_ = ...")
))
)),
list(name = "?mergePep",
children = list(
list(name = "dot-dot-dot",
children = list(
list(name = "filter_ = ...")
))
)),
list(name = "?standPep",
children = list(
list(name = "dot-dot-dot",
children = list(
list(name = "slice_ = ...")
))
)),
list(name = "purgePep",
children = list(
list(name = "dot-dot-dot",
children = list(
list(name = "width, height, etc.")
))
)),
list(name = "?Pep2Prn",
children = list(
list(name = "dot-dot-dot",
children = list(
list(name = "filter_ = ...")
))
)),
list(name = "?standPrn",
children = list(
list(name = "dot-dot-dot",
children = list(
list(name = "slice_ = ...")
))
))
)),
list(name = "statistical tests",
children = list(
list(name = "?pepSig"),
list(name = "?prnSig"),
list(name = "?pepVol"),
list(name = "?prnVol")
)
)
))
networkD3::diagonalNetwork(List = flowchart, fontSize = 11, width = 700, height = 600)
dir()
library(cluster)
?silhouette
devtools::document(pkg  = "C:\\Results\\R\\proteoq")
load_expts("~\\proteoQ\\examples")
plot_prnNMFCon(
impute_na = FALSE,
annot_cols = c("Color", "Alpha", "Shape"),
annot_colnames = c("Lab", "Batch", "WHIM"),
width = 12,
height = 12,
)
res_nmf
clus <- cluster::silhouette(res_nmf)
data(ruspini)
force(ruspini)
View(ruspini)
pr4 <- pam(ruspini, 4)
?pam
pr4
pr4$isolation
pr4$silinfo
x <- rbind(cbind(rnorm(10,0,0.5), rnorm(10,0,0.5)),
cbind(rnorm(15,5,0.5), rnorm(15,5,0.5)))
pamx <- pam(x, 2)
pamx # Medoids: '7' and '25' ...
summary(pamx)
plot(pamx)
head(x)
?silhouette
load_expts("C:\\Results\\Silva\\005")
plot_prnNMFCon(
impute_na = FALSE,
annot_cols = c("Group", "Color", "Shape"),
annot_colnames = c("Group", "Time", "Tibia"),
width = 12,
height = 12,
)
View(annotation_col)
annotation_col
is.na(annotation_col)
all(is.na(annotation_col))
devtools::document("C:\\Results\\R\\proteoQ")
plot_prnNMFCon(
impute_na = FALSE,
annot_cols = c("Group", "Color", "Shape"),
annot_colnames = c("Group", "Time", "Tibia"),
width = 12,
height = 12,
)
# coefficients heat maps, protein
plot_prnNMFCoef(
impute_na = FALSE,
annot_cols = c("Group", "Color", "Shape"),
annot_colnames = c("Group", "Time", "Tibia"),
width = 12,
height = 12,
)
?silhouette
si <- silhouette(pr4)
si
str(si)
summary(si)
plot(si)
plot(si)
plot(si, col = c("red", "green", "blue", "purple"))# with cluster-wise coloring
d <- dist(ruspini, "canberra")
?dist
d
head(df)
head(d)
pr4
pr4$clustering
si2 <- silhouette(pr4$clustering, dist(ruspini, "canberra"))
si2
summary(si2)
si
si2_euc <- silhouette(pr4$clustering, dist(ruspini, "euclidean"))
si2_euc
si
pr4
names(pr4)
pr4$clustering
si
plot(si)
plot(si, col = c("red", "green", "blue", "purple"))
?cmeans
x
cmeans(x, 4)
tempdata = cmeans(x, 4)
plot(x)
?pam
library(cluster)
?pam
x <- rbind(cbind(rnorm(10,0,0.5), rnorm(10,0,0.5)),
cbind(rnorm(15,5,0.5), rnorm(15,5,0.5)))
x
plot(x)
pamx = pam(x, 2)
summary(pamx)
plot(pamx)
plot(pamx)
plot(pamx)
plot(x)
plot(pamx)
p3m <- pam(x, 3, trace = 2)
plot(p3m)
daisy(x, metric = "manhattan")
data(ruspini)
plot(pam(ruspini, 4), ask = TRUE)
?daisy
plot(pam(ruspini, 4), ask = TRUE)
plot(pamx)
plot(pamx)
summary(pamx)
pamx$clustering
pamx$clusinfo
pamx$data
x
summary(pamx)
pamx$medoids
pamx$id.med
pamx$objective
pamx@isolation
pamx$isolation
pamx$diss
summary(pamx)
pamx$call
pamx
x
?clustplot
clustplot
clusplot(x)
?clusplot
clusplot(pamx)
?summary(pamx)
summary(pamx)
pamx$clusinfo
clusplot(pamx)
?silhouette
data(ruspini)
pr4 <- pam(ruspini, 4)
str(si <- silhouette(pr4))
(ssi <- summary(si))
plot(si) # silhouette plot
si
plot(ruspini)
summary(pr4)
devtools::document(pkg  = "C:\\Results\\R\\proteoq")
dat_dir
plot_prnNMFCon(
impute_na = FALSE,
annot_cols = c("Color", "Alpha", "Shape"),
annot_colnames = c("Lab", "Batch", "WHIM"),
width = 12,
height = 12,
)
names(res_nmf)
clus <- cluster::silhouette(res_nmf)
clus
clus <- cluster::silhouette(res_nmf)
attr(clus, "Ordered") <- NULL
attr(clus, "call") <- NULL
attr(clus, "class") <- NULL
clus <- data.frame(clus, check.names = FALSE)
clus <- clus %>% .[rownames(.) %in% label_scheme_sub$Sample_ID, ]
View(clus)
annotation_col %>%
tibble::rownames_to_column()
si
plot_prnNMFCon(
impute_na = FALSE,
annot_cols = c("Color", "Alpha", "Shape"),
annot_colnames = c("Lab", "Batch", "WHIM"),
width = 12,
height = 12,
)
clus
n = 100
g = 6
set.seed(g)
d <- data.frame(x = unlist(lapply(1:g, function(i) rnorm(n/g, runif(1)*i^2))),
y = unlist(lapply(1:g, function(i) rnorm(n/g, runif(1)*i^2))))
plot(d)
d
mydata <- d
mydata <- d
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
library(fpc)
install.packages("fpc")
library(fpc)
pamk.best <- pamk(d)
d
pamk.best
dim(d)
d$z <- rnorm(96)
df
d
pamk.best <- pamk(d)
pamk.best
plot(d)
library(mclust)
d_clust <- Mclust(as.matrix(d), G=1:20)
d_clust
d_clust$z
dim(d_clust$z)[2]
dim(d_clust$z)
clusGap(d, kmeans, 10, B = 100, verbose = interactive())
?clusGap
?clusGap
dim(d)
head(d)
clusGap(ruspini, FUN = pam1, K.max = 8, B = 60)
Z <- matrix(rnorm(256*3), 256,3)
gsP.Z <- clusGap(Z, FUN = pam1, K.max = 8, B = 200)
pam1 <- function(x,k) list(cluster = pam(x,k, cluster.only=TRUE))
Z <- matrix(rnorm(256*3), 256,3)
gsP.Z <- clusGap(Z, FUN = pam1, K.max = 8, B = 200)
gsP.Z
tempdata = pamk(Z)
tempdata
Z
tempdata
prnGSPAHM(
filter2_sp = exprs(start_with_str("hs", term)),
annot_cols = "ess_idx",
annot_colnames = "Eset index",
annot_rows = "ess_size",
filename = show_connectivity_at_large_dist.png,
)
my_pheatmap(
mat = ess_vs_all,
# filename = file.path(filepath, fml_nm, filename),
annotation_col = annotation_col,
annotation_row = annotation_row,
color = mypalette,
annotation_colors = annotation_colors,
breaks = NA, # not used
cluster_rows = cluster_rows,
cluster_cols = cluster_cols,
fontsize_row = fontsize_row,
fontsize_col = fontsize_col,
cellheight = cellheight,
cellwidth = cellwidth,
show_rownames = show_rownames,
show_colnames = show_colnames,
width = width,
height = height,
!!!dots,
)
pheatmap(
mat = ess_vs_all,
# filename = file.path(filepath, fml_nm, filename),
annotation_col = annotation_col,
annotation_row = annotation_row,
color = mypalette,
annotation_colors = annotation_colors,
breaks = NA, # not used
cluster_rows = cluster_rows,
cluster_cols = cluster_cols,
fontsize_row = fontsize_row,
fontsize_col = fontsize_col,
cellheight = cellheight,
cellwidth = cellwidth,
show_rownames = show_rownames,
show_colnames = show_colnames,
width = width,
height = height,
# !!!dots,
)
cluster_rows
cluster_cols
summary(cluster_rows)
prnGSPAHM(
filter2_sp = exprs(start_with_str("hs", term)),
annot_cols = "ess_idx",
annot_colnames = "Eset index",
annot_rows = "ess_size",
filename = show_connectivity_at_large_dist.png,
)
View(all_by_greedy)
View(ess_vs_all)
prnGSPAHM(
filter2_sp = exprs(start_with_str("hs", term)),
annot_cols = "ess_idx",
annot_colnames = "Eset index",
annot_rows = "ess_size",
filename = show_connectivity_at_large_dist.png,
)
tempdata <- fpc::pamk(ess_vs_all)
d_row
tempdata <- clusGap(ess_vs_all, kmeans, 10, B = 100, verbose = interactive())
anal_prnTrend(
col_order = Order,
n_clust = c(5:6),
filter_by_npep = exprs(prot_n_pep >= 3),
)
fn_prefix
View(df_mean)
?cluster::clusGap
clus
clus <- cluster::clusGap(df_mean, kmeans, 10, B = 100)
clus
names(clus)
clus$n
clus$Tab
clus$call
clas$spaceH0
clus$spaceH0
clus$B
summary(clus)
clus
clus[3,]
clus
clus[[1]]
clus[[2]]
clus[[3]]
clus[[4]]
clus[[5]]
clus[[6]]
clus[[7]]
assign("clus", clus, envir = .GlobalEnv)
clus$nc
str(clus)
maxSE(f = gap_stat$Tab[, "gap"], SE.f = gap_stat$Tab[, "SE.sim"])
maxSE(f = clus$Tab[, "gap"], SE.f = clus$Tab[, "SE.sim"])
clus$Tab[, "gap"]
clus$Tab[, "SE.sim"]
?maxSE
gap_stat <- clus
nc <- maxSE(f = gap_stat$Tab[, "gap"], SE.f = gap_stat$Tab[, "SE.sim"])
message("The number of clusters:", nc)
message("The number of clusters: ", nc)
?anal_prnTrend
?cmeans
?clusGap
devtools::document("C:\\Results\\R\\proteoQ")
anal_prnTrend(
col_order = Order,
# n_clust = c(5:6),
filter_by_npep = exprs(prot_n_pep >= 3),
)
n_clust <- local({
gap_stat <- cluster::clusGap(df_mean, kmeans, 10, B = 100)
maxSE(f = gap_stat$Tab[, "gap"], SE.f = gap_stat$Tab[, "SE.sim"])
})
devtools::document("C:\\Results\\R\\proteoQ")
anal_prnTrend(
col_order = Order,
# n_clust = c(5:6),
filter_by_npep = exprs(prot_n_pep >= 3),
)
devtools::document("C:\\Results\\R\\proteoQ")
devtools::document("C:\\Results\\R\\proteoQ")
load_expts("~\\proteoQ\\examples")
anal_prnTrend(
col_order = Order,
# n_clust = c(5:6),
filter_by_npep = exprs(prot_n_pep >= 3),
)
assign("df_mean", df_mean, envir = .GlobalEnv)
n_clust <- local({
# nrow <- nrow(df)
# if (nrow >= 5000) n_clust <- c(5:6) else if (nrow >= 2000) n_clust <- c(3:5) else n_clust <- 3
gap_stat <- cluster::clusGap(df_mean, kmeans, 10, B = 100)
maxSE(f = gap_stat$Tab[, "gap"], SE.f = gap_stat$Tab[, "SE.sim"])
})
?pam
pam1 <- function(x,k) list(cluster = pam(x,k, cluster.only=TRUE))
gap_pam <- cluster::clusGap(df_mean, pam1, K.max = 8, B = 100)
gap_stat <- cluster::clusGap(df_mean, silhouette(), 10, B = 100)
gap_stat <- cluster::clusGap(df_mean, silhouette, 10, B = 100)
clus_fpc <- fpc::pamk(df_mean)
clus_fpc
clus_fpc$nc
?pamk
library(fpc)
asw <- numeric(20)
asw
for (k in 2:20)
asw[[k]] <- pam(d, k) $ silinfo $ avg.width
for (k in 2:20)
asw[[k]] <- pam(df_mean, k) $ silinfo $ avg.width
asw
asw <- numeric(10)
for (k in 2:10) asw[[k]] <- pam(df_mean, k)$silinfo$avg.width
which.max(asw)
n_clust <- fpc::pamk(df_mean, 2:10)$nc
n_clust
?anal_prnNMF
devtools::document("C:\\Results\\R\\proteoQ")
?clusGap
?cutree
hc <- hclust(dist(USArrests))
cutree(hc, k = 1:5)
gap_stat <- cluster::clusGap(USArrests, kmeans, 10, B = 100)
gap_stat
maxSE(f = gap_stat$Tab[, "gap"], SE.f = gap_stat$Tab[, "SE.sim"])
plot(USArrests)
fpc::pamk(USArrests, 2:10)$nc
setwd("C:\\RESULTS\\r\\proteoQ\\web")
library(blogdown)
serve_site()
devtools::install("c:\\results\\r\\proteoq")
?install_hugo
install_hugo(force = TRIE)
